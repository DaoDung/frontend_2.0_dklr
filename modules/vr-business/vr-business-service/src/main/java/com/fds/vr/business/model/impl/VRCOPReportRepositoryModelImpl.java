/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.VRCOPReportRepository;
import com.fds.vr.business.model.VRCOPReportRepositoryModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the VRCOPReportRepository service. Represents a row in the &quot;vr_copreportrepository&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link VRCOPReportRepositoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VRCOPReportRepositoryImpl}.
 * </p>
 *
 * @author LamTV
 * @see VRCOPReportRepositoryImpl
 * @see VRCOPReportRepository
 * @see VRCOPReportRepositoryModel
 * @generated
 */
@ProviderType
public class VRCOPReportRepositoryModelImpl extends BaseModelImpl<VRCOPReportRepository>
	implements VRCOPReportRepositoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vrcop report repository model instance should use the {@link VRCOPReportRepository} interface instead.
	 */
	public static final String TABLE_NAME = "vr_copreportrepository";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtCore", Types.BIGINT },
			{ "applicantProfileId", Types.BIGINT },
			{ "applicantCode", Types.VARCHAR },
			{ "applicantName", Types.VARCHAR },
			{ "applicantAddress", Types.VARCHAR },
			{ "overseasManufacturerCode", Types.VARCHAR },
			{ "overseasManufacturerName", Types.VARCHAR },
			{ "overseasManufacturerAddress", Types.VARCHAR },
			{ "productionPlantId", Types.BIGINT },
			{ "productionPlantCode", Types.VARCHAR },
			{ "productionPlantName", Types.VARCHAR },
			{ "productionPlantAddress", Types.VARCHAR },
			{ "copReportNo", Types.VARCHAR },
			{ "copReportStatus", Types.VARCHAR },
			{ "copReportType", Types.VARCHAR },
			{ "copReportMetadata", Types.VARCHAR },
			{ "copReportSignName", Types.VARCHAR },
			{ "copReportSignTitle", Types.VARCHAR },
			{ "copReportSignPlace", Types.VARCHAR },
			{ "copReportDate", Types.TIMESTAMP },
			{ "copReportApprovedDate", Types.TIMESTAMP },
			{ "copReportExpiredDate", Types.TIMESTAMP },
			{ "COPFileEntryId", Types.BIGINT },
			{ "modifyDate", Types.TIMESTAMP },
			{ "syncDate", Types.TIMESTAMP },
			{ "importerManufacturerCode", Types.VARCHAR },
			{ "importerManufacturerName", Types.VARCHAR },
			{ "importerManufacturerAddress", Types.VARCHAR },
			{ "markupDomesticsManufacturer", Types.VARCHAR },
			{ "markupImporter", Types.VARCHAR },
			{ "copClassification", Types.VARCHAR },
			{ "productClassificationDescription", Types.VARCHAR },
			{ "totalPointA", Types.INTEGER },
			{ "totalPointB", Types.INTEGER },
			{ "totalPointC", Types.INTEGER },
			{ "copNonConformity", Types.VARCHAR },
			{ "inspectionRecordNo", Types.VARCHAR },
			{ "inspectionRecordDate", Types.TIMESTAMP },
			{ "corporationId", Types.BIGINT },
			{ "inspectorId", Types.BIGINT },
			{ "inspectionSite", Types.VARCHAR },
			{ "inspectionDateFrom", Types.TIMESTAMP },
			{ "inspectionDateTo", Types.TIMESTAMP },
			{ "subInspector", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "applicantRepresentative", Types.VARCHAR },
			{ "applicantRepresentativeTitle", Types.VARCHAR },
			{ "inspectionRecordFileEntryId", Types.BIGINT },
			{ "copReportRefNo", Types.VARCHAR },
			{ "copReportRefDate", Types.TIMESTAMP },
			{ "copReportPreviousNo", Types.VARCHAR },
			{ "copReportPreviousDate", Types.TIMESTAMP },
			{ "expiredStatus", Types.VARCHAR },
			{ "dossierId", Types.BIGINT },
			{ "dossierIdCTN", Types.VARCHAR },
			{ "dossierNo", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mtCore", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicantProfileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicantCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("overseasManufacturerCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("overseasManufacturerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("overseasManufacturerAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productionPlantCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productionPlantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportMetadata", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportSignName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportSignTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportSignPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("copReportApprovedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("copReportExpiredDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("COPFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("importerManufacturerCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("importerManufacturerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("importerManufacturerAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupDomesticsManufacturer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("markupImporter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copClassification", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productClassificationDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalPointA", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalPointB", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalPointC", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("copNonConformity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionRecordNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionRecordDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("corporationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("inspectorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("inspectionSite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionDateFrom", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("inspectionDateTo", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("subInspector", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantRepresentative", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantRepresentativeTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inspectionRecordFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("copReportRefNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportRefDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("copReportPreviousNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("copReportPreviousDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expiredStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dossierIdCTN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierNo", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table vr_copreportrepository (id LONG not null primary key,mtCore LONG,applicantProfileId LONG,applicantCode VARCHAR(75) null,applicantName VARCHAR(75) null,applicantAddress VARCHAR(75) null,overseasManufacturerCode VARCHAR(75) null,overseasManufacturerName VARCHAR(75) null,overseasManufacturerAddress VARCHAR(75) null,productionPlantId LONG,productionPlantCode VARCHAR(75) null,productionPlantName VARCHAR(75) null,productionPlantAddress VARCHAR(75) null,copReportNo VARCHAR(75) null,copReportStatus VARCHAR(75) null,copReportType VARCHAR(75) null,copReportMetadata VARCHAR(75) null,copReportSignName VARCHAR(75) null,copReportSignTitle VARCHAR(75) null,copReportSignPlace VARCHAR(75) null,copReportDate DATE null,copReportApprovedDate DATE null,copReportExpiredDate DATE null,COPFileEntryId LONG,modifyDate DATE null,syncDate DATE null,importerManufacturerCode VARCHAR(75) null,importerManufacturerName VARCHAR(75) null,importerManufacturerAddress VARCHAR(75) null,markupDomesticsManufacturer VARCHAR(75) null,markupImporter VARCHAR(75) null,copClassification VARCHAR(75) null,productClassificationDescription VARCHAR(75) null,totalPointA INTEGER,totalPointB INTEGER,totalPointC INTEGER,copNonConformity VARCHAR(75) null,inspectionRecordNo VARCHAR(75) null,inspectionRecordDate DATE null,corporationId LONG,inspectorId LONG,inspectionSite VARCHAR(75) null,inspectionDateFrom DATE null,inspectionDateTo DATE null,subInspector VARCHAR(75) null,description VARCHAR(75) null,applicantRepresentative VARCHAR(75) null,applicantRepresentativeTitle VARCHAR(75) null,inspectionRecordFileEntryId LONG,copReportRefNo VARCHAR(75) null,copReportRefDate DATE null,copReportPreviousNo VARCHAR(75) null,copReportPreviousDate DATE null,expiredStatus VARCHAR(75) null,dossierId LONG,dossierIdCTN VARCHAR(75) null,dossierNo VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table vr_copreportrepository";
	public static final String ORDER_BY_JPQL = " ORDER BY vrcopReportRepository.modifyDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_copreportrepository.modifyDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.VRCOPReportRepository"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.VRCOPReportRepository"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.VRCOPReportRepository"),
			true);
	public static final long APPLICANTPROFILEID_COLUMN_BITMASK = 1L;
	public static final long COPREPORTNO_COLUMN_BITMASK = 2L;
	public static final long COPREPORTSTATUS_COLUMN_BITMASK = 4L;
	public static final long MTCORE_COLUMN_BITMASK = 8L;
	public static final long PRODUCTIONPLANTADDRESS_COLUMN_BITMASK = 16L;
	public static final long PRODUCTIONPLANTCODE_COLUMN_BITMASK = 32L;
	public static final long PRODUCTIONPLANTNAME_COLUMN_BITMASK = 64L;
	public static final long MODIFYDATE_COLUMN_BITMASK = 128L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.VRCOPReportRepository"));

	public VRCOPReportRepositoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VRCOPReportRepository.class;
	}

	@Override
	public String getModelClassName() {
		return VRCOPReportRepository.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtCore", getMtCore());
		attributes.put("applicantProfileId", getApplicantProfileId());
		attributes.put("applicantCode", getApplicantCode());
		attributes.put("applicantName", getApplicantName());
		attributes.put("applicantAddress", getApplicantAddress());
		attributes.put("overseasManufacturerCode", getOverseasManufacturerCode());
		attributes.put("overseasManufacturerName", getOverseasManufacturerName());
		attributes.put("overseasManufacturerAddress",
			getOverseasManufacturerAddress());
		attributes.put("productionPlantId", getProductionPlantId());
		attributes.put("productionPlantCode", getProductionPlantCode());
		attributes.put("productionPlantName", getProductionPlantName());
		attributes.put("productionPlantAddress", getProductionPlantAddress());
		attributes.put("copReportNo", getCopReportNo());
		attributes.put("copReportStatus", getCopReportStatus());
		attributes.put("copReportType", getCopReportType());
		attributes.put("copReportMetadata", getCopReportMetadata());
		attributes.put("copReportSignName", getCopReportSignName());
		attributes.put("copReportSignTitle", getCopReportSignTitle());
		attributes.put("copReportSignPlace", getCopReportSignPlace());
		attributes.put("copReportDate", getCopReportDate());
		attributes.put("copReportApprovedDate", getCopReportApprovedDate());
		attributes.put("copReportExpiredDate", getCopReportExpiredDate());
		attributes.put("COPFileEntryId", getCOPFileEntryId());
		attributes.put("modifyDate", getModifyDate());
		attributes.put("syncDate", getSyncDate());
		attributes.put("importerManufacturerCode", getImporterManufacturerCode());
		attributes.put("importerManufacturerName", getImporterManufacturerName());
		attributes.put("importerManufacturerAddress",
			getImporterManufacturerAddress());
		attributes.put("markupDomesticsManufacturer",
			getMarkupDomesticsManufacturer());
		attributes.put("markupImporter", getMarkupImporter());
		attributes.put("copClassification", getCopClassification());
		attributes.put("productClassificationDescription",
			getProductClassificationDescription());
		attributes.put("totalPointA", getTotalPointA());
		attributes.put("totalPointB", getTotalPointB());
		attributes.put("totalPointC", getTotalPointC());
		attributes.put("copNonConformity", getCopNonConformity());
		attributes.put("inspectionRecordNo", getInspectionRecordNo());
		attributes.put("inspectionRecordDate", getInspectionRecordDate());
		attributes.put("corporationId", getCorporationId());
		attributes.put("inspectorId", getInspectorId());
		attributes.put("inspectionSite", getInspectionSite());
		attributes.put("inspectionDateFrom", getInspectionDateFrom());
		attributes.put("inspectionDateTo", getInspectionDateTo());
		attributes.put("subInspector", getSubInspector());
		attributes.put("description", getDescription());
		attributes.put("applicantRepresentative", getApplicantRepresentative());
		attributes.put("applicantRepresentativeTitle",
			getApplicantRepresentativeTitle());
		attributes.put("inspectionRecordFileEntryId",
			getInspectionRecordFileEntryId());
		attributes.put("copReportRefNo", getCopReportRefNo());
		attributes.put("copReportRefDate", getCopReportRefDate());
		attributes.put("copReportPreviousNo", getCopReportPreviousNo());
		attributes.put("copReportPreviousDate", getCopReportPreviousDate());
		attributes.put("expiredStatus", getExpiredStatus());
		attributes.put("dossierId", getDossierId());
		attributes.put("dossierIdCTN", getDossierIdCTN());
		attributes.put("dossierNo", getDossierNo());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtCore = (Long)attributes.get("mtCore");

		if (mtCore != null) {
			setMtCore(mtCore);
		}

		Long applicantProfileId = (Long)attributes.get("applicantProfileId");

		if (applicantProfileId != null) {
			setApplicantProfileId(applicantProfileId);
		}

		String applicantCode = (String)attributes.get("applicantCode");

		if (applicantCode != null) {
			setApplicantCode(applicantCode);
		}

		String applicantName = (String)attributes.get("applicantName");

		if (applicantName != null) {
			setApplicantName(applicantName);
		}

		String applicantAddress = (String)attributes.get("applicantAddress");

		if (applicantAddress != null) {
			setApplicantAddress(applicantAddress);
		}

		String overseasManufacturerCode = (String)attributes.get(
				"overseasManufacturerCode");

		if (overseasManufacturerCode != null) {
			setOverseasManufacturerCode(overseasManufacturerCode);
		}

		String overseasManufacturerName = (String)attributes.get(
				"overseasManufacturerName");

		if (overseasManufacturerName != null) {
			setOverseasManufacturerName(overseasManufacturerName);
		}

		String overseasManufacturerAddress = (String)attributes.get(
				"overseasManufacturerAddress");

		if (overseasManufacturerAddress != null) {
			setOverseasManufacturerAddress(overseasManufacturerAddress);
		}

		Long productionPlantId = (Long)attributes.get("productionPlantId");

		if (productionPlantId != null) {
			setProductionPlantId(productionPlantId);
		}

		String productionPlantCode = (String)attributes.get(
				"productionPlantCode");

		if (productionPlantCode != null) {
			setProductionPlantCode(productionPlantCode);
		}

		String productionPlantName = (String)attributes.get(
				"productionPlantName");

		if (productionPlantName != null) {
			setProductionPlantName(productionPlantName);
		}

		String productionPlantAddress = (String)attributes.get(
				"productionPlantAddress");

		if (productionPlantAddress != null) {
			setProductionPlantAddress(productionPlantAddress);
		}

		String copReportNo = (String)attributes.get("copReportNo");

		if (copReportNo != null) {
			setCopReportNo(copReportNo);
		}

		String copReportStatus = (String)attributes.get("copReportStatus");

		if (copReportStatus != null) {
			setCopReportStatus(copReportStatus);
		}

		String copReportType = (String)attributes.get("copReportType");

		if (copReportType != null) {
			setCopReportType(copReportType);
		}

		String copReportMetadata = (String)attributes.get("copReportMetadata");

		if (copReportMetadata != null) {
			setCopReportMetadata(copReportMetadata);
		}

		String copReportSignName = (String)attributes.get("copReportSignName");

		if (copReportSignName != null) {
			setCopReportSignName(copReportSignName);
		}

		String copReportSignTitle = (String)attributes.get("copReportSignTitle");

		if (copReportSignTitle != null) {
			setCopReportSignTitle(copReportSignTitle);
		}

		String copReportSignPlace = (String)attributes.get("copReportSignPlace");

		if (copReportSignPlace != null) {
			setCopReportSignPlace(copReportSignPlace);
		}

		Date copReportDate = (Date)attributes.get("copReportDate");

		if (copReportDate != null) {
			setCopReportDate(copReportDate);
		}

		Date copReportApprovedDate = (Date)attributes.get(
				"copReportApprovedDate");

		if (copReportApprovedDate != null) {
			setCopReportApprovedDate(copReportApprovedDate);
		}

		Date copReportExpiredDate = (Date)attributes.get("copReportExpiredDate");

		if (copReportExpiredDate != null) {
			setCopReportExpiredDate(copReportExpiredDate);
		}

		Long COPFileEntryId = (Long)attributes.get("COPFileEntryId");

		if (COPFileEntryId != null) {
			setCOPFileEntryId(COPFileEntryId);
		}

		Date modifyDate = (Date)attributes.get("modifyDate");

		if (modifyDate != null) {
			setModifyDate(modifyDate);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}

		String importerManufacturerCode = (String)attributes.get(
				"importerManufacturerCode");

		if (importerManufacturerCode != null) {
			setImporterManufacturerCode(importerManufacturerCode);
		}

		String importerManufacturerName = (String)attributes.get(
				"importerManufacturerName");

		if (importerManufacturerName != null) {
			setImporterManufacturerName(importerManufacturerName);
		}

		String importerManufacturerAddress = (String)attributes.get(
				"importerManufacturerAddress");

		if (importerManufacturerAddress != null) {
			setImporterManufacturerAddress(importerManufacturerAddress);
		}

		String markupDomesticsManufacturer = (String)attributes.get(
				"markupDomesticsManufacturer");

		if (markupDomesticsManufacturer != null) {
			setMarkupDomesticsManufacturer(markupDomesticsManufacturer);
		}

		String markupImporter = (String)attributes.get("markupImporter");

		if (markupImporter != null) {
			setMarkupImporter(markupImporter);
		}

		String copClassification = (String)attributes.get("copClassification");

		if (copClassification != null) {
			setCopClassification(copClassification);
		}

		String productClassificationDescription = (String)attributes.get(
				"productClassificationDescription");

		if (productClassificationDescription != null) {
			setProductClassificationDescription(productClassificationDescription);
		}

		Integer totalPointA = (Integer)attributes.get("totalPointA");

		if (totalPointA != null) {
			setTotalPointA(totalPointA);
		}

		Integer totalPointB = (Integer)attributes.get("totalPointB");

		if (totalPointB != null) {
			setTotalPointB(totalPointB);
		}

		Integer totalPointC = (Integer)attributes.get("totalPointC");

		if (totalPointC != null) {
			setTotalPointC(totalPointC);
		}

		String copNonConformity = (String)attributes.get("copNonConformity");

		if (copNonConformity != null) {
			setCopNonConformity(copNonConformity);
		}

		String inspectionRecordNo = (String)attributes.get("inspectionRecordNo");

		if (inspectionRecordNo != null) {
			setInspectionRecordNo(inspectionRecordNo);
		}

		Date inspectionRecordDate = (Date)attributes.get("inspectionRecordDate");

		if (inspectionRecordDate != null) {
			setInspectionRecordDate(inspectionRecordDate);
		}

		Long corporationId = (Long)attributes.get("corporationId");

		if (corporationId != null) {
			setCorporationId(corporationId);
		}

		Long inspectorId = (Long)attributes.get("inspectorId");

		if (inspectorId != null) {
			setInspectorId(inspectorId);
		}

		String inspectionSite = (String)attributes.get("inspectionSite");

		if (inspectionSite != null) {
			setInspectionSite(inspectionSite);
		}

		Date inspectionDateFrom = (Date)attributes.get("inspectionDateFrom");

		if (inspectionDateFrom != null) {
			setInspectionDateFrom(inspectionDateFrom);
		}

		Date inspectionDateTo = (Date)attributes.get("inspectionDateTo");

		if (inspectionDateTo != null) {
			setInspectionDateTo(inspectionDateTo);
		}

		String subInspector = (String)attributes.get("subInspector");

		if (subInspector != null) {
			setSubInspector(subInspector);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String applicantRepresentative = (String)attributes.get(
				"applicantRepresentative");

		if (applicantRepresentative != null) {
			setApplicantRepresentative(applicantRepresentative);
		}

		String applicantRepresentativeTitle = (String)attributes.get(
				"applicantRepresentativeTitle");

		if (applicantRepresentativeTitle != null) {
			setApplicantRepresentativeTitle(applicantRepresentativeTitle);
		}

		Long inspectionRecordFileEntryId = (Long)attributes.get(
				"inspectionRecordFileEntryId");

		if (inspectionRecordFileEntryId != null) {
			setInspectionRecordFileEntryId(inspectionRecordFileEntryId);
		}

		String copReportRefNo = (String)attributes.get("copReportRefNo");

		if (copReportRefNo != null) {
			setCopReportRefNo(copReportRefNo);
		}

		Date copReportRefDate = (Date)attributes.get("copReportRefDate");

		if (copReportRefDate != null) {
			setCopReportRefDate(copReportRefDate);
		}

		String copReportPreviousNo = (String)attributes.get(
				"copReportPreviousNo");

		if (copReportPreviousNo != null) {
			setCopReportPreviousNo(copReportPreviousNo);
		}

		Date copReportPreviousDate = (Date)attributes.get(
				"copReportPreviousDate");

		if (copReportPreviousDate != null) {
			setCopReportPreviousDate(copReportPreviousDate);
		}

		String expiredStatus = (String)attributes.get("expiredStatus");

		if (expiredStatus != null) {
			setExpiredStatus(expiredStatus);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		String dossierIdCTN = (String)attributes.get("dossierIdCTN");

		if (dossierIdCTN != null) {
			setDossierIdCTN(dossierIdCTN);
		}

		String dossierNo = (String)attributes.get("dossierNo");

		if (dossierNo != null) {
			setDossierNo(dossierNo);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getMtCore() {
		return _mtCore;
	}

	@Override
	public void setMtCore(long mtCore) {
		_columnBitmask |= MTCORE_COLUMN_BITMASK;

		if (!_setOriginalMtCore) {
			_setOriginalMtCore = true;

			_originalMtCore = _mtCore;
		}

		_mtCore = mtCore;
	}

	public long getOriginalMtCore() {
		return _originalMtCore;
	}

	@Override
	public long getApplicantProfileId() {
		return _applicantProfileId;
	}

	@Override
	public void setApplicantProfileId(long applicantProfileId) {
		_columnBitmask |= APPLICANTPROFILEID_COLUMN_BITMASK;

		if (!_setOriginalApplicantProfileId) {
			_setOriginalApplicantProfileId = true;

			_originalApplicantProfileId = _applicantProfileId;
		}

		_applicantProfileId = applicantProfileId;
	}

	public long getOriginalApplicantProfileId() {
		return _originalApplicantProfileId;
	}

	@Override
	public String getApplicantCode() {
		if (_applicantCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantCode;
		}
	}

	@Override
	public void setApplicantCode(String applicantCode) {
		_applicantCode = applicantCode;
	}

	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		_applicantName = applicantName;
	}

	@Override
	public String getApplicantAddress() {
		if (_applicantAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantAddress;
		}
	}

	@Override
	public void setApplicantAddress(String applicantAddress) {
		_applicantAddress = applicantAddress;
	}

	@Override
	public String getOverseasManufacturerCode() {
		if (_overseasManufacturerCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _overseasManufacturerCode;
		}
	}

	@Override
	public void setOverseasManufacturerCode(String overseasManufacturerCode) {
		_overseasManufacturerCode = overseasManufacturerCode;
	}

	@Override
	public String getOverseasManufacturerName() {
		if (_overseasManufacturerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _overseasManufacturerName;
		}
	}

	@Override
	public void setOverseasManufacturerName(String overseasManufacturerName) {
		_overseasManufacturerName = overseasManufacturerName;
	}

	@Override
	public String getOverseasManufacturerAddress() {
		if (_overseasManufacturerAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _overseasManufacturerAddress;
		}
	}

	@Override
	public void setOverseasManufacturerAddress(
		String overseasManufacturerAddress) {
		_overseasManufacturerAddress = overseasManufacturerAddress;
	}

	@Override
	public long getProductionPlantId() {
		return _productionPlantId;
	}

	@Override
	public void setProductionPlantId(long productionPlantId) {
		_productionPlantId = productionPlantId;
	}

	@Override
	public String getProductionPlantCode() {
		if (_productionPlantCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantCode;
		}
	}

	@Override
	public void setProductionPlantCode(String productionPlantCode) {
		_columnBitmask |= PRODUCTIONPLANTCODE_COLUMN_BITMASK;

		if (_originalProductionPlantCode == null) {
			_originalProductionPlantCode = _productionPlantCode;
		}

		_productionPlantCode = productionPlantCode;
	}

	public String getOriginalProductionPlantCode() {
		return GetterUtil.getString(_originalProductionPlantCode);
	}

	@Override
	public String getProductionPlantName() {
		if (_productionPlantName == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantName;
		}
	}

	@Override
	public void setProductionPlantName(String productionPlantName) {
		_columnBitmask |= PRODUCTIONPLANTNAME_COLUMN_BITMASK;

		if (_originalProductionPlantName == null) {
			_originalProductionPlantName = _productionPlantName;
		}

		_productionPlantName = productionPlantName;
	}

	public String getOriginalProductionPlantName() {
		return GetterUtil.getString(_originalProductionPlantName);
	}

	@Override
	public String getProductionPlantAddress() {
		if (_productionPlantAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlantAddress;
		}
	}

	@Override
	public void setProductionPlantAddress(String productionPlantAddress) {
		_columnBitmask |= PRODUCTIONPLANTADDRESS_COLUMN_BITMASK;

		if (_originalProductionPlantAddress == null) {
			_originalProductionPlantAddress = _productionPlantAddress;
		}

		_productionPlantAddress = productionPlantAddress;
	}

	public String getOriginalProductionPlantAddress() {
		return GetterUtil.getString(_originalProductionPlantAddress);
	}

	@Override
	public String getCopReportNo() {
		if (_copReportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportNo;
		}
	}

	@Override
	public void setCopReportNo(String copReportNo) {
		_columnBitmask |= COPREPORTNO_COLUMN_BITMASK;

		if (_originalCopReportNo == null) {
			_originalCopReportNo = _copReportNo;
		}

		_copReportNo = copReportNo;
	}

	public String getOriginalCopReportNo() {
		return GetterUtil.getString(_originalCopReportNo);
	}

	@Override
	public String getCopReportStatus() {
		if (_copReportStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportStatus;
		}
	}

	@Override
	public void setCopReportStatus(String copReportStatus) {
		_columnBitmask |= COPREPORTSTATUS_COLUMN_BITMASK;

		if (_originalCopReportStatus == null) {
			_originalCopReportStatus = _copReportStatus;
		}

		_copReportStatus = copReportStatus;
	}

	public String getOriginalCopReportStatus() {
		return GetterUtil.getString(_originalCopReportStatus);
	}

	@Override
	public String getCopReportType() {
		if (_copReportType == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportType;
		}
	}

	@Override
	public void setCopReportType(String copReportType) {
		_copReportType = copReportType;
	}

	@Override
	public String getCopReportMetadata() {
		if (_copReportMetadata == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportMetadata;
		}
	}

	@Override
	public void setCopReportMetadata(String copReportMetadata) {
		_copReportMetadata = copReportMetadata;
	}

	@Override
	public String getCopReportSignName() {
		if (_copReportSignName == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportSignName;
		}
	}

	@Override
	public void setCopReportSignName(String copReportSignName) {
		_copReportSignName = copReportSignName;
	}

	@Override
	public String getCopReportSignTitle() {
		if (_copReportSignTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportSignTitle;
		}
	}

	@Override
	public void setCopReportSignTitle(String copReportSignTitle) {
		_copReportSignTitle = copReportSignTitle;
	}

	@Override
	public String getCopReportSignPlace() {
		if (_copReportSignPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportSignPlace;
		}
	}

	@Override
	public void setCopReportSignPlace(String copReportSignPlace) {
		_copReportSignPlace = copReportSignPlace;
	}

	@Override
	public Date getCopReportDate() {
		return _copReportDate;
	}

	@Override
	public void setCopReportDate(Date copReportDate) {
		_copReportDate = copReportDate;
	}

	@Override
	public Date getCopReportApprovedDate() {
		return _copReportApprovedDate;
	}

	@Override
	public void setCopReportApprovedDate(Date copReportApprovedDate) {
		_copReportApprovedDate = copReportApprovedDate;
	}

	@Override
	public Date getCopReportExpiredDate() {
		return _copReportExpiredDate;
	}

	@Override
	public void setCopReportExpiredDate(Date copReportExpiredDate) {
		_copReportExpiredDate = copReportExpiredDate;
	}

	@Override
	public long getCOPFileEntryId() {
		return _COPFileEntryId;
	}

	@Override
	public void setCOPFileEntryId(long COPFileEntryId) {
		_COPFileEntryId = COPFileEntryId;
	}

	@Override
	public Date getModifyDate() {
		return _modifyDate;
	}

	@Override
	public void setModifyDate(Date modifyDate) {
		_columnBitmask = -1L;

		_modifyDate = modifyDate;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	@Override
	public String getImporterManufacturerCode() {
		if (_importerManufacturerCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _importerManufacturerCode;
		}
	}

	@Override
	public void setImporterManufacturerCode(String importerManufacturerCode) {
		_importerManufacturerCode = importerManufacturerCode;
	}

	@Override
	public String getImporterManufacturerName() {
		if (_importerManufacturerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _importerManufacturerName;
		}
	}

	@Override
	public void setImporterManufacturerName(String importerManufacturerName) {
		_importerManufacturerName = importerManufacturerName;
	}

	@Override
	public String getImporterManufacturerAddress() {
		if (_importerManufacturerAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _importerManufacturerAddress;
		}
	}

	@Override
	public void setImporterManufacturerAddress(
		String importerManufacturerAddress) {
		_importerManufacturerAddress = importerManufacturerAddress;
	}

	@Override
	public String getMarkupDomesticsManufacturer() {
		if (_markupDomesticsManufacturer == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupDomesticsManufacturer;
		}
	}

	@Override
	public void setMarkupDomesticsManufacturer(
		String markupDomesticsManufacturer) {
		_markupDomesticsManufacturer = markupDomesticsManufacturer;
	}

	@Override
	public String getMarkupImporter() {
		if (_markupImporter == null) {
			return StringPool.BLANK;
		}
		else {
			return _markupImporter;
		}
	}

	@Override
	public void setMarkupImporter(String markupImporter) {
		_markupImporter = markupImporter;
	}

	@Override
	public String getCopClassification() {
		if (_copClassification == null) {
			return StringPool.BLANK;
		}
		else {
			return _copClassification;
		}
	}

	@Override
	public void setCopClassification(String copClassification) {
		_copClassification = copClassification;
	}

	@Override
	public String getProductClassificationDescription() {
		if (_productClassificationDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _productClassificationDescription;
		}
	}

	@Override
	public void setProductClassificationDescription(
		String productClassificationDescription) {
		_productClassificationDescription = productClassificationDescription;
	}

	@Override
	public int getTotalPointA() {
		return _totalPointA;
	}

	@Override
	public void setTotalPointA(int totalPointA) {
		_totalPointA = totalPointA;
	}

	@Override
	public int getTotalPointB() {
		return _totalPointB;
	}

	@Override
	public void setTotalPointB(int totalPointB) {
		_totalPointB = totalPointB;
	}

	@Override
	public int getTotalPointC() {
		return _totalPointC;
	}

	@Override
	public void setTotalPointC(int totalPointC) {
		_totalPointC = totalPointC;
	}

	@Override
	public String getCopNonConformity() {
		if (_copNonConformity == null) {
			return StringPool.BLANK;
		}
		else {
			return _copNonConformity;
		}
	}

	@Override
	public void setCopNonConformity(String copNonConformity) {
		_copNonConformity = copNonConformity;
	}

	@Override
	public String getInspectionRecordNo() {
		if (_inspectionRecordNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionRecordNo;
		}
	}

	@Override
	public void setInspectionRecordNo(String inspectionRecordNo) {
		_inspectionRecordNo = inspectionRecordNo;
	}

	@Override
	public Date getInspectionRecordDate() {
		return _inspectionRecordDate;
	}

	@Override
	public void setInspectionRecordDate(Date inspectionRecordDate) {
		_inspectionRecordDate = inspectionRecordDate;
	}

	@Override
	public long getCorporationId() {
		return _corporationId;
	}

	@Override
	public void setCorporationId(long corporationId) {
		_corporationId = corporationId;
	}

	@Override
	public long getInspectorId() {
		return _inspectorId;
	}

	@Override
	public void setInspectorId(long inspectorId) {
		_inspectorId = inspectorId;
	}

	@Override
	public String getInspectionSite() {
		if (_inspectionSite == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionSite;
		}
	}

	@Override
	public void setInspectionSite(String inspectionSite) {
		_inspectionSite = inspectionSite;
	}

	@Override
	public Date getInspectionDateFrom() {
		return _inspectionDateFrom;
	}

	@Override
	public void setInspectionDateFrom(Date inspectionDateFrom) {
		_inspectionDateFrom = inspectionDateFrom;
	}

	@Override
	public Date getInspectionDateTo() {
		return _inspectionDateTo;
	}

	@Override
	public void setInspectionDateTo(Date inspectionDateTo) {
		_inspectionDateTo = inspectionDateTo;
	}

	@Override
	public String getSubInspector() {
		if (_subInspector == null) {
			return StringPool.BLANK;
		}
		else {
			return _subInspector;
		}
	}

	@Override
	public void setSubInspector(String subInspector) {
		_subInspector = subInspector;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getApplicantRepresentative() {
		if (_applicantRepresentative == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantRepresentative;
		}
	}

	@Override
	public void setApplicantRepresentative(String applicantRepresentative) {
		_applicantRepresentative = applicantRepresentative;
	}

	@Override
	public String getApplicantRepresentativeTitle() {
		if (_applicantRepresentativeTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantRepresentativeTitle;
		}
	}

	@Override
	public void setApplicantRepresentativeTitle(
		String applicantRepresentativeTitle) {
		_applicantRepresentativeTitle = applicantRepresentativeTitle;
	}

	@Override
	public long getInspectionRecordFileEntryId() {
		return _inspectionRecordFileEntryId;
	}

	@Override
	public void setInspectionRecordFileEntryId(long inspectionRecordFileEntryId) {
		_inspectionRecordFileEntryId = inspectionRecordFileEntryId;
	}

	@Override
	public String getCopReportRefNo() {
		if (_copReportRefNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportRefNo;
		}
	}

	@Override
	public void setCopReportRefNo(String copReportRefNo) {
		_copReportRefNo = copReportRefNo;
	}

	@Override
	public Date getCopReportRefDate() {
		return _copReportRefDate;
	}

	@Override
	public void setCopReportRefDate(Date copReportRefDate) {
		_copReportRefDate = copReportRefDate;
	}

	@Override
	public String getCopReportPreviousNo() {
		if (_copReportPreviousNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _copReportPreviousNo;
		}
	}

	@Override
	public void setCopReportPreviousNo(String copReportPreviousNo) {
		_copReportPreviousNo = copReportPreviousNo;
	}

	@Override
	public Date getCopReportPreviousDate() {
		return _copReportPreviousDate;
	}

	@Override
	public void setCopReportPreviousDate(Date copReportPreviousDate) {
		_copReportPreviousDate = copReportPreviousDate;
	}

	@Override
	public String getExpiredStatus() {
		if (_expiredStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _expiredStatus;
		}
	}

	@Override
	public void setExpiredStatus(String expiredStatus) {
		_expiredStatus = expiredStatus;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_dossierId = dossierId;
	}

	@Override
	public String getDossierIdCTN() {
		if (_dossierIdCTN == null) {
			return StringPool.BLANK;
		}
		else {
			return _dossierIdCTN;
		}
	}

	@Override
	public void setDossierIdCTN(String dossierIdCTN) {
		_dossierIdCTN = dossierIdCTN;
	}

	@Override
	public String getDossierNo() {
		if (_dossierNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _dossierNo;
		}
	}

	@Override
	public void setDossierNo(String dossierNo) {
		_dossierNo = dossierNo;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VRCOPReportRepository.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VRCOPReportRepository toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VRCOPReportRepository)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VRCOPReportRepositoryImpl vrcopReportRepositoryImpl = new VRCOPReportRepositoryImpl();

		vrcopReportRepositoryImpl.setId(getId());
		vrcopReportRepositoryImpl.setMtCore(getMtCore());
		vrcopReportRepositoryImpl.setApplicantProfileId(getApplicantProfileId());
		vrcopReportRepositoryImpl.setApplicantCode(getApplicantCode());
		vrcopReportRepositoryImpl.setApplicantName(getApplicantName());
		vrcopReportRepositoryImpl.setApplicantAddress(getApplicantAddress());
		vrcopReportRepositoryImpl.setOverseasManufacturerCode(getOverseasManufacturerCode());
		vrcopReportRepositoryImpl.setOverseasManufacturerName(getOverseasManufacturerName());
		vrcopReportRepositoryImpl.setOverseasManufacturerAddress(getOverseasManufacturerAddress());
		vrcopReportRepositoryImpl.setProductionPlantId(getProductionPlantId());
		vrcopReportRepositoryImpl.setProductionPlantCode(getProductionPlantCode());
		vrcopReportRepositoryImpl.setProductionPlantName(getProductionPlantName());
		vrcopReportRepositoryImpl.setProductionPlantAddress(getProductionPlantAddress());
		vrcopReportRepositoryImpl.setCopReportNo(getCopReportNo());
		vrcopReportRepositoryImpl.setCopReportStatus(getCopReportStatus());
		vrcopReportRepositoryImpl.setCopReportType(getCopReportType());
		vrcopReportRepositoryImpl.setCopReportMetadata(getCopReportMetadata());
		vrcopReportRepositoryImpl.setCopReportSignName(getCopReportSignName());
		vrcopReportRepositoryImpl.setCopReportSignTitle(getCopReportSignTitle());
		vrcopReportRepositoryImpl.setCopReportSignPlace(getCopReportSignPlace());
		vrcopReportRepositoryImpl.setCopReportDate(getCopReportDate());
		vrcopReportRepositoryImpl.setCopReportApprovedDate(getCopReportApprovedDate());
		vrcopReportRepositoryImpl.setCopReportExpiredDate(getCopReportExpiredDate());
		vrcopReportRepositoryImpl.setCOPFileEntryId(getCOPFileEntryId());
		vrcopReportRepositoryImpl.setModifyDate(getModifyDate());
		vrcopReportRepositoryImpl.setSyncDate(getSyncDate());
		vrcopReportRepositoryImpl.setImporterManufacturerCode(getImporterManufacturerCode());
		vrcopReportRepositoryImpl.setImporterManufacturerName(getImporterManufacturerName());
		vrcopReportRepositoryImpl.setImporterManufacturerAddress(getImporterManufacturerAddress());
		vrcopReportRepositoryImpl.setMarkupDomesticsManufacturer(getMarkupDomesticsManufacturer());
		vrcopReportRepositoryImpl.setMarkupImporter(getMarkupImporter());
		vrcopReportRepositoryImpl.setCopClassification(getCopClassification());
		vrcopReportRepositoryImpl.setProductClassificationDescription(getProductClassificationDescription());
		vrcopReportRepositoryImpl.setTotalPointA(getTotalPointA());
		vrcopReportRepositoryImpl.setTotalPointB(getTotalPointB());
		vrcopReportRepositoryImpl.setTotalPointC(getTotalPointC());
		vrcopReportRepositoryImpl.setCopNonConformity(getCopNonConformity());
		vrcopReportRepositoryImpl.setInspectionRecordNo(getInspectionRecordNo());
		vrcopReportRepositoryImpl.setInspectionRecordDate(getInspectionRecordDate());
		vrcopReportRepositoryImpl.setCorporationId(getCorporationId());
		vrcopReportRepositoryImpl.setInspectorId(getInspectorId());
		vrcopReportRepositoryImpl.setInspectionSite(getInspectionSite());
		vrcopReportRepositoryImpl.setInspectionDateFrom(getInspectionDateFrom());
		vrcopReportRepositoryImpl.setInspectionDateTo(getInspectionDateTo());
		vrcopReportRepositoryImpl.setSubInspector(getSubInspector());
		vrcopReportRepositoryImpl.setDescription(getDescription());
		vrcopReportRepositoryImpl.setApplicantRepresentative(getApplicantRepresentative());
		vrcopReportRepositoryImpl.setApplicantRepresentativeTitle(getApplicantRepresentativeTitle());
		vrcopReportRepositoryImpl.setInspectionRecordFileEntryId(getInspectionRecordFileEntryId());
		vrcopReportRepositoryImpl.setCopReportRefNo(getCopReportRefNo());
		vrcopReportRepositoryImpl.setCopReportRefDate(getCopReportRefDate());
		vrcopReportRepositoryImpl.setCopReportPreviousNo(getCopReportPreviousNo());
		vrcopReportRepositoryImpl.setCopReportPreviousDate(getCopReportPreviousDate());
		vrcopReportRepositoryImpl.setExpiredStatus(getExpiredStatus());
		vrcopReportRepositoryImpl.setDossierId(getDossierId());
		vrcopReportRepositoryImpl.setDossierIdCTN(getDossierIdCTN());
		vrcopReportRepositoryImpl.setDossierNo(getDossierNo());

		vrcopReportRepositoryImpl.resetOriginalValues();

		return vrcopReportRepositoryImpl;
	}

	@Override
	public int compareTo(VRCOPReportRepository vrcopReportRepository) {
		int value = 0;

		value = DateUtil.compareTo(getModifyDate(),
				vrcopReportRepository.getModifyDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VRCOPReportRepository)) {
			return false;
		}

		VRCOPReportRepository vrcopReportRepository = (VRCOPReportRepository)obj;

		long primaryKey = vrcopReportRepository.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VRCOPReportRepositoryModelImpl vrcopReportRepositoryModelImpl = this;

		vrcopReportRepositoryModelImpl._originalMtCore = vrcopReportRepositoryModelImpl._mtCore;

		vrcopReportRepositoryModelImpl._setOriginalMtCore = false;

		vrcopReportRepositoryModelImpl._originalApplicantProfileId = vrcopReportRepositoryModelImpl._applicantProfileId;

		vrcopReportRepositoryModelImpl._setOriginalApplicantProfileId = false;

		vrcopReportRepositoryModelImpl._originalProductionPlantCode = vrcopReportRepositoryModelImpl._productionPlantCode;

		vrcopReportRepositoryModelImpl._originalProductionPlantName = vrcopReportRepositoryModelImpl._productionPlantName;

		vrcopReportRepositoryModelImpl._originalProductionPlantAddress = vrcopReportRepositoryModelImpl._productionPlantAddress;

		vrcopReportRepositoryModelImpl._originalCopReportNo = vrcopReportRepositoryModelImpl._copReportNo;

		vrcopReportRepositoryModelImpl._originalCopReportStatus = vrcopReportRepositoryModelImpl._copReportStatus;

		vrcopReportRepositoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VRCOPReportRepository> toCacheModel() {
		VRCOPReportRepositoryCacheModel vrcopReportRepositoryCacheModel = new VRCOPReportRepositoryCacheModel();

		vrcopReportRepositoryCacheModel.id = getId();

		vrcopReportRepositoryCacheModel.mtCore = getMtCore();

		vrcopReportRepositoryCacheModel.applicantProfileId = getApplicantProfileId();

		vrcopReportRepositoryCacheModel.applicantCode = getApplicantCode();

		String applicantCode = vrcopReportRepositoryCacheModel.applicantCode;

		if ((applicantCode != null) && (applicantCode.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantCode = null;
		}

		vrcopReportRepositoryCacheModel.applicantName = getApplicantName();

		String applicantName = vrcopReportRepositoryCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantName = null;
		}

		vrcopReportRepositoryCacheModel.applicantAddress = getApplicantAddress();

		String applicantAddress = vrcopReportRepositoryCacheModel.applicantAddress;

		if ((applicantAddress != null) && (applicantAddress.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantAddress = null;
		}

		vrcopReportRepositoryCacheModel.overseasManufacturerCode = getOverseasManufacturerCode();

		String overseasManufacturerCode = vrcopReportRepositoryCacheModel.overseasManufacturerCode;

		if ((overseasManufacturerCode != null) &&
				(overseasManufacturerCode.length() == 0)) {
			vrcopReportRepositoryCacheModel.overseasManufacturerCode = null;
		}

		vrcopReportRepositoryCacheModel.overseasManufacturerName = getOverseasManufacturerName();

		String overseasManufacturerName = vrcopReportRepositoryCacheModel.overseasManufacturerName;

		if ((overseasManufacturerName != null) &&
				(overseasManufacturerName.length() == 0)) {
			vrcopReportRepositoryCacheModel.overseasManufacturerName = null;
		}

		vrcopReportRepositoryCacheModel.overseasManufacturerAddress = getOverseasManufacturerAddress();

		String overseasManufacturerAddress = vrcopReportRepositoryCacheModel.overseasManufacturerAddress;

		if ((overseasManufacturerAddress != null) &&
				(overseasManufacturerAddress.length() == 0)) {
			vrcopReportRepositoryCacheModel.overseasManufacturerAddress = null;
		}

		vrcopReportRepositoryCacheModel.productionPlantId = getProductionPlantId();

		vrcopReportRepositoryCacheModel.productionPlantCode = getProductionPlantCode();

		String productionPlantCode = vrcopReportRepositoryCacheModel.productionPlantCode;

		if ((productionPlantCode != null) &&
				(productionPlantCode.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionPlantCode = null;
		}

		vrcopReportRepositoryCacheModel.productionPlantName = getProductionPlantName();

		String productionPlantName = vrcopReportRepositoryCacheModel.productionPlantName;

		if ((productionPlantName != null) &&
				(productionPlantName.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionPlantName = null;
		}

		vrcopReportRepositoryCacheModel.productionPlantAddress = getProductionPlantAddress();

		String productionPlantAddress = vrcopReportRepositoryCacheModel.productionPlantAddress;

		if ((productionPlantAddress != null) &&
				(productionPlantAddress.length() == 0)) {
			vrcopReportRepositoryCacheModel.productionPlantAddress = null;
		}

		vrcopReportRepositoryCacheModel.copReportNo = getCopReportNo();

		String copReportNo = vrcopReportRepositoryCacheModel.copReportNo;

		if ((copReportNo != null) && (copReportNo.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportNo = null;
		}

		vrcopReportRepositoryCacheModel.copReportStatus = getCopReportStatus();

		String copReportStatus = vrcopReportRepositoryCacheModel.copReportStatus;

		if ((copReportStatus != null) && (copReportStatus.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportStatus = null;
		}

		vrcopReportRepositoryCacheModel.copReportType = getCopReportType();

		String copReportType = vrcopReportRepositoryCacheModel.copReportType;

		if ((copReportType != null) && (copReportType.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportType = null;
		}

		vrcopReportRepositoryCacheModel.copReportMetadata = getCopReportMetadata();

		String copReportMetadata = vrcopReportRepositoryCacheModel.copReportMetadata;

		if ((copReportMetadata != null) && (copReportMetadata.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportMetadata = null;
		}

		vrcopReportRepositoryCacheModel.copReportSignName = getCopReportSignName();

		String copReportSignName = vrcopReportRepositoryCacheModel.copReportSignName;

		if ((copReportSignName != null) && (copReportSignName.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportSignName = null;
		}

		vrcopReportRepositoryCacheModel.copReportSignTitle = getCopReportSignTitle();

		String copReportSignTitle = vrcopReportRepositoryCacheModel.copReportSignTitle;

		if ((copReportSignTitle != null) && (copReportSignTitle.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportSignTitle = null;
		}

		vrcopReportRepositoryCacheModel.copReportSignPlace = getCopReportSignPlace();

		String copReportSignPlace = vrcopReportRepositoryCacheModel.copReportSignPlace;

		if ((copReportSignPlace != null) && (copReportSignPlace.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportSignPlace = null;
		}

		Date copReportDate = getCopReportDate();

		if (copReportDate != null) {
			vrcopReportRepositoryCacheModel.copReportDate = copReportDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.copReportDate = Long.MIN_VALUE;
		}

		Date copReportApprovedDate = getCopReportApprovedDate();

		if (copReportApprovedDate != null) {
			vrcopReportRepositoryCacheModel.copReportApprovedDate = copReportApprovedDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.copReportApprovedDate = Long.MIN_VALUE;
		}

		Date copReportExpiredDate = getCopReportExpiredDate();

		if (copReportExpiredDate != null) {
			vrcopReportRepositoryCacheModel.copReportExpiredDate = copReportExpiredDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.copReportExpiredDate = Long.MIN_VALUE;
		}

		vrcopReportRepositoryCacheModel.COPFileEntryId = getCOPFileEntryId();

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			vrcopReportRepositoryCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.modifyDate = Long.MIN_VALUE;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			vrcopReportRepositoryCacheModel.syncDate = syncDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.syncDate = Long.MIN_VALUE;
		}

		vrcopReportRepositoryCacheModel.importerManufacturerCode = getImporterManufacturerCode();

		String importerManufacturerCode = vrcopReportRepositoryCacheModel.importerManufacturerCode;

		if ((importerManufacturerCode != null) &&
				(importerManufacturerCode.length() == 0)) {
			vrcopReportRepositoryCacheModel.importerManufacturerCode = null;
		}

		vrcopReportRepositoryCacheModel.importerManufacturerName = getImporterManufacturerName();

		String importerManufacturerName = vrcopReportRepositoryCacheModel.importerManufacturerName;

		if ((importerManufacturerName != null) &&
				(importerManufacturerName.length() == 0)) {
			vrcopReportRepositoryCacheModel.importerManufacturerName = null;
		}

		vrcopReportRepositoryCacheModel.importerManufacturerAddress = getImporterManufacturerAddress();

		String importerManufacturerAddress = vrcopReportRepositoryCacheModel.importerManufacturerAddress;

		if ((importerManufacturerAddress != null) &&
				(importerManufacturerAddress.length() == 0)) {
			vrcopReportRepositoryCacheModel.importerManufacturerAddress = null;
		}

		vrcopReportRepositoryCacheModel.markupDomesticsManufacturer = getMarkupDomesticsManufacturer();

		String markupDomesticsManufacturer = vrcopReportRepositoryCacheModel.markupDomesticsManufacturer;

		if ((markupDomesticsManufacturer != null) &&
				(markupDomesticsManufacturer.length() == 0)) {
			vrcopReportRepositoryCacheModel.markupDomesticsManufacturer = null;
		}

		vrcopReportRepositoryCacheModel.markupImporter = getMarkupImporter();

		String markupImporter = vrcopReportRepositoryCacheModel.markupImporter;

		if ((markupImporter != null) && (markupImporter.length() == 0)) {
			vrcopReportRepositoryCacheModel.markupImporter = null;
		}

		vrcopReportRepositoryCacheModel.copClassification = getCopClassification();

		String copClassification = vrcopReportRepositoryCacheModel.copClassification;

		if ((copClassification != null) && (copClassification.length() == 0)) {
			vrcopReportRepositoryCacheModel.copClassification = null;
		}

		vrcopReportRepositoryCacheModel.productClassificationDescription = getProductClassificationDescription();

		String productClassificationDescription = vrcopReportRepositoryCacheModel.productClassificationDescription;

		if ((productClassificationDescription != null) &&
				(productClassificationDescription.length() == 0)) {
			vrcopReportRepositoryCacheModel.productClassificationDescription = null;
		}

		vrcopReportRepositoryCacheModel.totalPointA = getTotalPointA();

		vrcopReportRepositoryCacheModel.totalPointB = getTotalPointB();

		vrcopReportRepositoryCacheModel.totalPointC = getTotalPointC();

		vrcopReportRepositoryCacheModel.copNonConformity = getCopNonConformity();

		String copNonConformity = vrcopReportRepositoryCacheModel.copNonConformity;

		if ((copNonConformity != null) && (copNonConformity.length() == 0)) {
			vrcopReportRepositoryCacheModel.copNonConformity = null;
		}

		vrcopReportRepositoryCacheModel.inspectionRecordNo = getInspectionRecordNo();

		String inspectionRecordNo = vrcopReportRepositoryCacheModel.inspectionRecordNo;

		if ((inspectionRecordNo != null) && (inspectionRecordNo.length() == 0)) {
			vrcopReportRepositoryCacheModel.inspectionRecordNo = null;
		}

		Date inspectionRecordDate = getInspectionRecordDate();

		if (inspectionRecordDate != null) {
			vrcopReportRepositoryCacheModel.inspectionRecordDate = inspectionRecordDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.inspectionRecordDate = Long.MIN_VALUE;
		}

		vrcopReportRepositoryCacheModel.corporationId = getCorporationId();

		vrcopReportRepositoryCacheModel.inspectorId = getInspectorId();

		vrcopReportRepositoryCacheModel.inspectionSite = getInspectionSite();

		String inspectionSite = vrcopReportRepositoryCacheModel.inspectionSite;

		if ((inspectionSite != null) && (inspectionSite.length() == 0)) {
			vrcopReportRepositoryCacheModel.inspectionSite = null;
		}

		Date inspectionDateFrom = getInspectionDateFrom();

		if (inspectionDateFrom != null) {
			vrcopReportRepositoryCacheModel.inspectionDateFrom = inspectionDateFrom.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.inspectionDateFrom = Long.MIN_VALUE;
		}

		Date inspectionDateTo = getInspectionDateTo();

		if (inspectionDateTo != null) {
			vrcopReportRepositoryCacheModel.inspectionDateTo = inspectionDateTo.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.inspectionDateTo = Long.MIN_VALUE;
		}

		vrcopReportRepositoryCacheModel.subInspector = getSubInspector();

		String subInspector = vrcopReportRepositoryCacheModel.subInspector;

		if ((subInspector != null) && (subInspector.length() == 0)) {
			vrcopReportRepositoryCacheModel.subInspector = null;
		}

		vrcopReportRepositoryCacheModel.description = getDescription();

		String description = vrcopReportRepositoryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			vrcopReportRepositoryCacheModel.description = null;
		}

		vrcopReportRepositoryCacheModel.applicantRepresentative = getApplicantRepresentative();

		String applicantRepresentative = vrcopReportRepositoryCacheModel.applicantRepresentative;

		if ((applicantRepresentative != null) &&
				(applicantRepresentative.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantRepresentative = null;
		}

		vrcopReportRepositoryCacheModel.applicantRepresentativeTitle = getApplicantRepresentativeTitle();

		String applicantRepresentativeTitle = vrcopReportRepositoryCacheModel.applicantRepresentativeTitle;

		if ((applicantRepresentativeTitle != null) &&
				(applicantRepresentativeTitle.length() == 0)) {
			vrcopReportRepositoryCacheModel.applicantRepresentativeTitle = null;
		}

		vrcopReportRepositoryCacheModel.inspectionRecordFileEntryId = getInspectionRecordFileEntryId();

		vrcopReportRepositoryCacheModel.copReportRefNo = getCopReportRefNo();

		String copReportRefNo = vrcopReportRepositoryCacheModel.copReportRefNo;

		if ((copReportRefNo != null) && (copReportRefNo.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportRefNo = null;
		}

		Date copReportRefDate = getCopReportRefDate();

		if (copReportRefDate != null) {
			vrcopReportRepositoryCacheModel.copReportRefDate = copReportRefDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.copReportRefDate = Long.MIN_VALUE;
		}

		vrcopReportRepositoryCacheModel.copReportPreviousNo = getCopReportPreviousNo();

		String copReportPreviousNo = vrcopReportRepositoryCacheModel.copReportPreviousNo;

		if ((copReportPreviousNo != null) &&
				(copReportPreviousNo.length() == 0)) {
			vrcopReportRepositoryCacheModel.copReportPreviousNo = null;
		}

		Date copReportPreviousDate = getCopReportPreviousDate();

		if (copReportPreviousDate != null) {
			vrcopReportRepositoryCacheModel.copReportPreviousDate = copReportPreviousDate.getTime();
		}
		else {
			vrcopReportRepositoryCacheModel.copReportPreviousDate = Long.MIN_VALUE;
		}

		vrcopReportRepositoryCacheModel.expiredStatus = getExpiredStatus();

		String expiredStatus = vrcopReportRepositoryCacheModel.expiredStatus;

		if ((expiredStatus != null) && (expiredStatus.length() == 0)) {
			vrcopReportRepositoryCacheModel.expiredStatus = null;
		}

		vrcopReportRepositoryCacheModel.dossierId = getDossierId();

		vrcopReportRepositoryCacheModel.dossierIdCTN = getDossierIdCTN();

		String dossierIdCTN = vrcopReportRepositoryCacheModel.dossierIdCTN;

		if ((dossierIdCTN != null) && (dossierIdCTN.length() == 0)) {
			vrcopReportRepositoryCacheModel.dossierIdCTN = null;
		}

		vrcopReportRepositoryCacheModel.dossierNo = getDossierNo();

		String dossierNo = vrcopReportRepositoryCacheModel.dossierNo;

		if ((dossierNo != null) && (dossierNo.length() == 0)) {
			vrcopReportRepositoryCacheModel.dossierNo = null;
		}

		return vrcopReportRepositoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(115);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtCore=");
		sb.append(getMtCore());
		sb.append(", applicantProfileId=");
		sb.append(getApplicantProfileId());
		sb.append(", applicantCode=");
		sb.append(getApplicantCode());
		sb.append(", applicantName=");
		sb.append(getApplicantName());
		sb.append(", applicantAddress=");
		sb.append(getApplicantAddress());
		sb.append(", overseasManufacturerCode=");
		sb.append(getOverseasManufacturerCode());
		sb.append(", overseasManufacturerName=");
		sb.append(getOverseasManufacturerName());
		sb.append(", overseasManufacturerAddress=");
		sb.append(getOverseasManufacturerAddress());
		sb.append(", productionPlantId=");
		sb.append(getProductionPlantId());
		sb.append(", productionPlantCode=");
		sb.append(getProductionPlantCode());
		sb.append(", productionPlantName=");
		sb.append(getProductionPlantName());
		sb.append(", productionPlantAddress=");
		sb.append(getProductionPlantAddress());
		sb.append(", copReportNo=");
		sb.append(getCopReportNo());
		sb.append(", copReportStatus=");
		sb.append(getCopReportStatus());
		sb.append(", copReportType=");
		sb.append(getCopReportType());
		sb.append(", copReportMetadata=");
		sb.append(getCopReportMetadata());
		sb.append(", copReportSignName=");
		sb.append(getCopReportSignName());
		sb.append(", copReportSignTitle=");
		sb.append(getCopReportSignTitle());
		sb.append(", copReportSignPlace=");
		sb.append(getCopReportSignPlace());
		sb.append(", copReportDate=");
		sb.append(getCopReportDate());
		sb.append(", copReportApprovedDate=");
		sb.append(getCopReportApprovedDate());
		sb.append(", copReportExpiredDate=");
		sb.append(getCopReportExpiredDate());
		sb.append(", COPFileEntryId=");
		sb.append(getCOPFileEntryId());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append(", importerManufacturerCode=");
		sb.append(getImporterManufacturerCode());
		sb.append(", importerManufacturerName=");
		sb.append(getImporterManufacturerName());
		sb.append(", importerManufacturerAddress=");
		sb.append(getImporterManufacturerAddress());
		sb.append(", markupDomesticsManufacturer=");
		sb.append(getMarkupDomesticsManufacturer());
		sb.append(", markupImporter=");
		sb.append(getMarkupImporter());
		sb.append(", copClassification=");
		sb.append(getCopClassification());
		sb.append(", productClassificationDescription=");
		sb.append(getProductClassificationDescription());
		sb.append(", totalPointA=");
		sb.append(getTotalPointA());
		sb.append(", totalPointB=");
		sb.append(getTotalPointB());
		sb.append(", totalPointC=");
		sb.append(getTotalPointC());
		sb.append(", copNonConformity=");
		sb.append(getCopNonConformity());
		sb.append(", inspectionRecordNo=");
		sb.append(getInspectionRecordNo());
		sb.append(", inspectionRecordDate=");
		sb.append(getInspectionRecordDate());
		sb.append(", corporationId=");
		sb.append(getCorporationId());
		sb.append(", inspectorId=");
		sb.append(getInspectorId());
		sb.append(", inspectionSite=");
		sb.append(getInspectionSite());
		sb.append(", inspectionDateFrom=");
		sb.append(getInspectionDateFrom());
		sb.append(", inspectionDateTo=");
		sb.append(getInspectionDateTo());
		sb.append(", subInspector=");
		sb.append(getSubInspector());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", applicantRepresentative=");
		sb.append(getApplicantRepresentative());
		sb.append(", applicantRepresentativeTitle=");
		sb.append(getApplicantRepresentativeTitle());
		sb.append(", inspectionRecordFileEntryId=");
		sb.append(getInspectionRecordFileEntryId());
		sb.append(", copReportRefNo=");
		sb.append(getCopReportRefNo());
		sb.append(", copReportRefDate=");
		sb.append(getCopReportRefDate());
		sb.append(", copReportPreviousNo=");
		sb.append(getCopReportPreviousNo());
		sb.append(", copReportPreviousDate=");
		sb.append(getCopReportPreviousDate());
		sb.append(", expiredStatus=");
		sb.append(getExpiredStatus());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", dossierIdCTN=");
		sb.append(getDossierIdCTN());
		sb.append(", dossierNo=");
		sb.append(getDossierNo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(175);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.VRCOPReportRepository");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtCore</column-name><column-value><![CDATA[");
		sb.append(getMtCore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantProfileId</column-name><column-value><![CDATA[");
		sb.append(getApplicantProfileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantCode</column-name><column-value><![CDATA[");
		sb.append(getApplicantCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantName</column-name><column-value><![CDATA[");
		sb.append(getApplicantName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantAddress</column-name><column-value><![CDATA[");
		sb.append(getApplicantAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overseasManufacturerCode</column-name><column-value><![CDATA[");
		sb.append(getOverseasManufacturerCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overseasManufacturerName</column-name><column-value><![CDATA[");
		sb.append(getOverseasManufacturerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overseasManufacturerAddress</column-name><column-value><![CDATA[");
		sb.append(getOverseasManufacturerAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantId</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantCode</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantName</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlantAddress</column-name><column-value><![CDATA[");
		sb.append(getProductionPlantAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportNo</column-name><column-value><![CDATA[");
		sb.append(getCopReportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportStatus</column-name><column-value><![CDATA[");
		sb.append(getCopReportStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportType</column-name><column-value><![CDATA[");
		sb.append(getCopReportType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportMetadata</column-name><column-value><![CDATA[");
		sb.append(getCopReportMetadata());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportSignName</column-name><column-value><![CDATA[");
		sb.append(getCopReportSignName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportSignTitle</column-name><column-value><![CDATA[");
		sb.append(getCopReportSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportSignPlace</column-name><column-value><![CDATA[");
		sb.append(getCopReportSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportApprovedDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportApprovedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportExpiredDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportExpiredDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>COPFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getCOPFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerManufacturerCode</column-name><column-value><![CDATA[");
		sb.append(getImporterManufacturerCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerManufacturerName</column-name><column-value><![CDATA[");
		sb.append(getImporterManufacturerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerManufacturerAddress</column-name><column-value><![CDATA[");
		sb.append(getImporterManufacturerAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupDomesticsManufacturer</column-name><column-value><![CDATA[");
		sb.append(getMarkupDomesticsManufacturer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupImporter</column-name><column-value><![CDATA[");
		sb.append(getMarkupImporter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copClassification</column-name><column-value><![CDATA[");
		sb.append(getCopClassification());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productClassificationDescription</column-name><column-value><![CDATA[");
		sb.append(getProductClassificationDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalPointA</column-name><column-value><![CDATA[");
		sb.append(getTotalPointA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalPointB</column-name><column-value><![CDATA[");
		sb.append(getTotalPointB());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalPointC</column-name><column-value><![CDATA[");
		sb.append(getTotalPointC());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copNonConformity</column-name><column-value><![CDATA[");
		sb.append(getCopNonConformity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordNo</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordDate</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationId</column-name><column-value><![CDATA[");
		sb.append(getCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorId</column-name><column-value><![CDATA[");
		sb.append(getInspectorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionSite</column-name><column-value><![CDATA[");
		sb.append(getInspectionSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDateFrom</column-name><column-value><![CDATA[");
		sb.append(getInspectionDateFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDateTo</column-name><column-value><![CDATA[");
		sb.append(getInspectionDateTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subInspector</column-name><column-value><![CDATA[");
		sb.append(getSubInspector());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantRepresentative</column-name><column-value><![CDATA[");
		sb.append(getApplicantRepresentative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantRepresentativeTitle</column-name><column-value><![CDATA[");
		sb.append(getApplicantRepresentativeTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportRefNo</column-name><column-value><![CDATA[");
		sb.append(getCopReportRefNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportRefDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportRefDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportPreviousNo</column-name><column-value><![CDATA[");
		sb.append(getCopReportPreviousNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copReportPreviousDate</column-name><column-value><![CDATA[");
		sb.append(getCopReportPreviousDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiredStatus</column-name><column-value><![CDATA[");
		sb.append(getExpiredStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierIdCTN</column-name><column-value><![CDATA[");
		sb.append(getDossierIdCTN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierNo</column-name><column-value><![CDATA[");
		sb.append(getDossierNo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = VRCOPReportRepository.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			VRCOPReportRepository.class
		};
	private long _id;
	private long _mtCore;
	private long _originalMtCore;
	private boolean _setOriginalMtCore;
	private long _applicantProfileId;
	private long _originalApplicantProfileId;
	private boolean _setOriginalApplicantProfileId;
	private String _applicantCode;
	private String _applicantName;
	private String _applicantAddress;
	private String _overseasManufacturerCode;
	private String _overseasManufacturerName;
	private String _overseasManufacturerAddress;
	private long _productionPlantId;
	private String _productionPlantCode;
	private String _originalProductionPlantCode;
	private String _productionPlantName;
	private String _originalProductionPlantName;
	private String _productionPlantAddress;
	private String _originalProductionPlantAddress;
	private String _copReportNo;
	private String _originalCopReportNo;
	private String _copReportStatus;
	private String _originalCopReportStatus;
	private String _copReportType;
	private String _copReportMetadata;
	private String _copReportSignName;
	private String _copReportSignTitle;
	private String _copReportSignPlace;
	private Date _copReportDate;
	private Date _copReportApprovedDate;
	private Date _copReportExpiredDate;
	private long _COPFileEntryId;
	private Date _modifyDate;
	private Date _syncDate;
	private String _importerManufacturerCode;
	private String _importerManufacturerName;
	private String _importerManufacturerAddress;
	private String _markupDomesticsManufacturer;
	private String _markupImporter;
	private String _copClassification;
	private String _productClassificationDescription;
	private int _totalPointA;
	private int _totalPointB;
	private int _totalPointC;
	private String _copNonConformity;
	private String _inspectionRecordNo;
	private Date _inspectionRecordDate;
	private long _corporationId;
	private long _inspectorId;
	private String _inspectionSite;
	private Date _inspectionDateFrom;
	private Date _inspectionDateTo;
	private String _subInspector;
	private String _description;
	private String _applicantRepresentative;
	private String _applicantRepresentativeTitle;
	private long _inspectionRecordFileEntryId;
	private String _copReportRefNo;
	private Date _copReportRefDate;
	private String _copReportPreviousNo;
	private Date _copReportPreviousDate;
	private String _expiredStatus;
	private long _dossierId;
	private String _dossierIdCTN;
	private String _dossierNo;
	private long _columnBitmask;
	private VRCOPReportRepository _escapedModel;
}