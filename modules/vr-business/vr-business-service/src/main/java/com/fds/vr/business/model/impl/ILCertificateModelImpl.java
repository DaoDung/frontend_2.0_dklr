/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.ILCertificate;
import com.fds.vr.business.model.ILCertificateModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ILCertificate service. Represents a row in the &quot;il_certificate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ILCertificateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ILCertificateImpl}.
 * </p>
 *
 * @author LamTV
 * @see ILCertificateImpl
 * @see ILCertificate
 * @see ILCertificateModel
 * @generated
 */
@ProviderType
public class ILCertificateModelImpl extends BaseModelImpl<ILCertificate>
	implements ILCertificateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a il certificate model instance should use the {@link ILCertificate} interface instead.
	 */
	public static final String TABLE_NAME = "il_certificate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "certificateId", Types.BIGINT },
			{ "dossierId", Types.BIGINT },
			{ "dossierFileId", Types.BIGINT },
			{ "dossierTemplateNo", Types.VARCHAR },
			{ "dossierPartNo", Types.VARCHAR },
			{ "fileTemplateNo", Types.VARCHAR },
			{ "referenceUid", Types.VARCHAR },
			{ "serviceCode", Types.VARCHAR },
			{ "validFrom", Types.TIMESTAMP },
			{ "validUntil", Types.TIMESTAMP },
			{ "transportOperation", Types.VARCHAR },
			{ "applicantName", Types.VARCHAR },
			{ "applicantIdNo", Types.VARCHAR },
			{ "applicantAddress", Types.VARCHAR },
			{ "applicantTel", Types.VARCHAR },
			{ "applicantFax", Types.VARCHAR },
			{ "applicantEmail", Types.VARCHAR },
			{ "applicantWebsite", Types.VARCHAR },
			{ "signName", Types.VARCHAR },
			{ "signTitle", Types.VARCHAR },
			{ "signPlace", Types.VARCHAR },
			{ "signDate", Types.TIMESTAMP },
			{ "licenceNo", Types.VARCHAR },
			{ "licenceName", Types.VARCHAR },
			{ "govAgencyCode", Types.VARCHAR },
			{ "govAgencyName", Types.VARCHAR },
			{ "registrationNumber", Types.VARCHAR },
			{ "manufacturedYear", Types.VARCHAR },
			{ "technicalData", Types.VARCHAR },
			{ "trademarkCode", Types.VARCHAR },
			{ "trademarkName", Types.VARCHAR },
			{ "model", Types.VARCHAR },
			{ "vehicleType", Types.VARCHAR },
			{ "vehicleColor", Types.VARCHAR },
			{ "engineNumber", Types.VARCHAR },
			{ "chassisNumber", Types.VARCHAR },
			{ "expiredDate", Types.TIMESTAMP },
			{ "borderGate", Types.VARCHAR },
			{ "travelingArea", Types.VARCHAR },
			{ "destination", Types.VARCHAR },
			{ "extendedUntil", Types.TIMESTAMP },
			{ "noticesOfExtension", Types.VARCHAR },
			{ "purposeOfTheTrip", Types.VARCHAR },
			{ "issuingDispatchNo", Types.VARCHAR },
			{ "officialDispatchNo", Types.VARCHAR },
			{ "officialDispatchDate", Types.TIMESTAMP },
			{ "departureFrom", Types.VARCHAR },
			{ "departureTo", Types.VARCHAR },
			{ "fromParkingLot", Types.VARCHAR },
			{ "fromProvinceCode", Types.VARCHAR },
			{ "fromProvinceName", Types.VARCHAR },
			{ "toParkingLot", Types.VARCHAR },
			{ "toProvinceCode", Types.VARCHAR },
			{ "toProvinceName", Types.VARCHAR },
			{ "distance", Types.VARCHAR },
			{ "routeDescription", Types.VARCHAR },
			{ "expImpGateCode", Types.VARCHAR },
			{ "expImpGate", Types.VARCHAR },
			{ "itemNo", Types.VARCHAR },
			{ "circularNo", Types.VARCHAR },
			{ "circularDate", Types.TIMESTAMP },
			{ "numberOfVehicle", Types.VARCHAR },
			{ "toVNAuthority", Types.VARCHAR },
			{ "toLAOAuthority", Types.VARCHAR },
			{ "atParkingLot", Types.VARCHAR },
			{ "atProvinceName", Types.VARCHAR },
			{ "numberOfLot", Types.BIGINT },
			{ "applicantContactName", Types.VARCHAR },
			{ "passenger", Types.VARCHAR },
			{ "capacity", Types.VARCHAR },
			{ "purpose", Types.VARCHAR },
			{ "routes", Types.VARCHAR },
			{ "goodsType", Types.VARCHAR },
			{ "stops", Types.VARCHAR },
			{ "licenceType", Types.VARCHAR },
			{ "syncDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("certificateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dossierFileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dossierTemplateNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierPartNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileTemplateNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("referenceUid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serviceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("validFrom", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("validUntil", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("transportOperation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantIdNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantTel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantFax", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantWebsite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("licenceNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenceName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("govAgencyCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("govAgencyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("registrationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturedYear", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("technicalData", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trademarkCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trademarkName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("model", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vehicleType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vehicleColor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("engineNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("chassisNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expiredDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("borderGate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("travelingArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("destination", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("extendedUntil", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("noticesOfExtension", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("purposeOfTheTrip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("issuingDispatchNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("officialDispatchNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("officialDispatchDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("departureFrom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("departureTo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fromParkingLot", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fromProvinceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fromProvinceName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("toParkingLot", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("toProvinceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("toProvinceName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("distance", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("routeDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expImpGateCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expImpGate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("itemNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("circularNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("circularDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("numberOfVehicle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("toVNAuthority", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("toLAOAuthority", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("atParkingLot", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("atProvinceName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfLot", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicantContactName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("passenger", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("capacity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("purpose", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("routes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("goodsType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stops", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenceType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table il_certificate (certificateId LONG not null primary key,dossierId LONG,dossierFileId LONG,dossierTemplateNo VARCHAR(75) null,dossierPartNo VARCHAR(75) null,fileTemplateNo VARCHAR(75) null,referenceUid VARCHAR(75) null,serviceCode VARCHAR(75) null,validFrom DATE null,validUntil DATE null,transportOperation VARCHAR(75) null,applicantName VARCHAR(75) null,applicantIdNo VARCHAR(75) null,applicantAddress VARCHAR(75) null,applicantTel VARCHAR(75) null,applicantFax VARCHAR(75) null,applicantEmail VARCHAR(75) null,applicantWebsite VARCHAR(75) null,signName VARCHAR(75) null,signTitle VARCHAR(75) null,signPlace VARCHAR(75) null,signDate DATE null,licenceNo VARCHAR(75) null,licenceName VARCHAR(75) null,govAgencyCode VARCHAR(75) null,govAgencyName VARCHAR(75) null,registrationNumber VARCHAR(75) null,manufacturedYear VARCHAR(75) null,technicalData VARCHAR(75) null,trademarkCode VARCHAR(75) null,trademarkName VARCHAR(75) null,model VARCHAR(75) null,vehicleType VARCHAR(75) null,vehicleColor VARCHAR(75) null,engineNumber VARCHAR(75) null,chassisNumber VARCHAR(75) null,expiredDate DATE null,borderGate VARCHAR(75) null,travelingArea VARCHAR(75) null,destination VARCHAR(75) null,extendedUntil DATE null,noticesOfExtension VARCHAR(75) null,purposeOfTheTrip VARCHAR(75) null,issuingDispatchNo VARCHAR(75) null,officialDispatchNo VARCHAR(75) null,officialDispatchDate DATE null,departureFrom VARCHAR(75) null,departureTo VARCHAR(75) null,fromParkingLot VARCHAR(75) null,fromProvinceCode VARCHAR(75) null,fromProvinceName VARCHAR(75) null,toParkingLot VARCHAR(75) null,toProvinceCode VARCHAR(75) null,toProvinceName VARCHAR(75) null,distance VARCHAR(75) null,routeDescription VARCHAR(75) null,expImpGateCode VARCHAR(75) null,expImpGate VARCHAR(75) null,itemNo VARCHAR(75) null,circularNo VARCHAR(75) null,circularDate DATE null,numberOfVehicle VARCHAR(75) null,toVNAuthority VARCHAR(75) null,toLAOAuthority VARCHAR(75) null,atParkingLot VARCHAR(75) null,atProvinceName VARCHAR(75) null,numberOfLot LONG,applicantContactName VARCHAR(75) null,passenger VARCHAR(75) null,capacity VARCHAR(75) null,purpose VARCHAR(75) null,routes VARCHAR(75) null,goodsType VARCHAR(75) null,stops VARCHAR(75) null,licenceType VARCHAR(75) null,syncDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table il_certificate";
	public static final String ORDER_BY_JPQL = " ORDER BY ilCertificate.validFrom ASC";
	public static final String ORDER_BY_SQL = " ORDER BY il_certificate.validFrom ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.ILCertificate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.ILCertificate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.ILCertificate"),
			true);
	public static final long APPLICANTIDNO_COLUMN_BITMASK = 1L;
	public static final long DOSSIERFILEID_COLUMN_BITMASK = 2L;
	public static final long REGISTRATIONNUMBER_COLUMN_BITMASK = 4L;
	public static final long SERVICECODE_COLUMN_BITMASK = 8L;
	public static final long VALIDFROM_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.ILCertificate"));

	public ILCertificateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ILCertificate.class;
	}

	@Override
	public String getModelClassName() {
		return ILCertificate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("dossierId", getDossierId());
		attributes.put("dossierFileId", getDossierFileId());
		attributes.put("dossierTemplateNo", getDossierTemplateNo());
		attributes.put("dossierPartNo", getDossierPartNo());
		attributes.put("fileTemplateNo", getFileTemplateNo());
		attributes.put("referenceUid", getReferenceUid());
		attributes.put("serviceCode", getServiceCode());
		attributes.put("validFrom", getValidFrom());
		attributes.put("validUntil", getValidUntil());
		attributes.put("transportOperation", getTransportOperation());
		attributes.put("applicantName", getApplicantName());
		attributes.put("applicantIdNo", getApplicantIdNo());
		attributes.put("applicantAddress", getApplicantAddress());
		attributes.put("applicantTel", getApplicantTel());
		attributes.put("applicantFax", getApplicantFax());
		attributes.put("applicantEmail", getApplicantEmail());
		attributes.put("applicantWebsite", getApplicantWebsite());
		attributes.put("signName", getSignName());
		attributes.put("signTitle", getSignTitle());
		attributes.put("signPlace", getSignPlace());
		attributes.put("signDate", getSignDate());
		attributes.put("licenceNo", getLicenceNo());
		attributes.put("licenceName", getLicenceName());
		attributes.put("govAgencyCode", getGovAgencyCode());
		attributes.put("govAgencyName", getGovAgencyName());
		attributes.put("registrationNumber", getRegistrationNumber());
		attributes.put("manufacturedYear", getManufacturedYear());
		attributes.put("technicalData", getTechnicalData());
		attributes.put("trademarkCode", getTrademarkCode());
		attributes.put("trademarkName", getTrademarkName());
		attributes.put("model", getModel());
		attributes.put("vehicleType", getVehicleType());
		attributes.put("vehicleColor", getVehicleColor());
		attributes.put("engineNumber", getEngineNumber());
		attributes.put("chassisNumber", getChassisNumber());
		attributes.put("expiredDate", getExpiredDate());
		attributes.put("borderGate", getBorderGate());
		attributes.put("travelingArea", getTravelingArea());
		attributes.put("destination", getDestination());
		attributes.put("extendedUntil", getExtendedUntil());
		attributes.put("noticesOfExtension", getNoticesOfExtension());
		attributes.put("purposeOfTheTrip", getPurposeOfTheTrip());
		attributes.put("issuingDispatchNo", getIssuingDispatchNo());
		attributes.put("officialDispatchNo", getOfficialDispatchNo());
		attributes.put("officialDispatchDate", getOfficialDispatchDate());
		attributes.put("departureFrom", getDepartureFrom());
		attributes.put("departureTo", getDepartureTo());
		attributes.put("fromParkingLot", getFromParkingLot());
		attributes.put("fromProvinceCode", getFromProvinceCode());
		attributes.put("fromProvinceName", getFromProvinceName());
		attributes.put("toParkingLot", getToParkingLot());
		attributes.put("toProvinceCode", getToProvinceCode());
		attributes.put("toProvinceName", getToProvinceName());
		attributes.put("distance", getDistance());
		attributes.put("routeDescription", getRouteDescription());
		attributes.put("expImpGateCode", getExpImpGateCode());
		attributes.put("expImpGate", getExpImpGate());
		attributes.put("itemNo", getItemNo());
		attributes.put("circularNo", getCircularNo());
		attributes.put("circularDate", getCircularDate());
		attributes.put("numberOfVehicle", getNumberOfVehicle());
		attributes.put("toVNAuthority", getToVNAuthority());
		attributes.put("toLAOAuthority", getToLAOAuthority());
		attributes.put("atParkingLot", getAtParkingLot());
		attributes.put("atProvinceName", getAtProvinceName());
		attributes.put("numberOfLot", getNumberOfLot());
		attributes.put("applicantContactName", getApplicantContactName());
		attributes.put("passenger", getPassenger());
		attributes.put("capacity", getCapacity());
		attributes.put("purpose", getPurpose());
		attributes.put("routes", getRoutes());
		attributes.put("goodsType", getGoodsType());
		attributes.put("stops", getStops());
		attributes.put("licenceType", getLicenceType());
		attributes.put("syncDate", getSyncDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		Long dossierFileId = (Long)attributes.get("dossierFileId");

		if (dossierFileId != null) {
			setDossierFileId(dossierFileId);
		}

		String dossierTemplateNo = (String)attributes.get("dossierTemplateNo");

		if (dossierTemplateNo != null) {
			setDossierTemplateNo(dossierTemplateNo);
		}

		String dossierPartNo = (String)attributes.get("dossierPartNo");

		if (dossierPartNo != null) {
			setDossierPartNo(dossierPartNo);
		}

		String fileTemplateNo = (String)attributes.get("fileTemplateNo");

		if (fileTemplateNo != null) {
			setFileTemplateNo(fileTemplateNo);
		}

		String referenceUid = (String)attributes.get("referenceUid");

		if (referenceUid != null) {
			setReferenceUid(referenceUid);
		}

		String serviceCode = (String)attributes.get("serviceCode");

		if (serviceCode != null) {
			setServiceCode(serviceCode);
		}

		Date validFrom = (Date)attributes.get("validFrom");

		if (validFrom != null) {
			setValidFrom(validFrom);
		}

		Date validUntil = (Date)attributes.get("validUntil");

		if (validUntil != null) {
			setValidUntil(validUntil);
		}

		String transportOperation = (String)attributes.get("transportOperation");

		if (transportOperation != null) {
			setTransportOperation(transportOperation);
		}

		String applicantName = (String)attributes.get("applicantName");

		if (applicantName != null) {
			setApplicantName(applicantName);
		}

		String applicantIdNo = (String)attributes.get("applicantIdNo");

		if (applicantIdNo != null) {
			setApplicantIdNo(applicantIdNo);
		}

		String applicantAddress = (String)attributes.get("applicantAddress");

		if (applicantAddress != null) {
			setApplicantAddress(applicantAddress);
		}

		String applicantTel = (String)attributes.get("applicantTel");

		if (applicantTel != null) {
			setApplicantTel(applicantTel);
		}

		String applicantFax = (String)attributes.get("applicantFax");

		if (applicantFax != null) {
			setApplicantFax(applicantFax);
		}

		String applicantEmail = (String)attributes.get("applicantEmail");

		if (applicantEmail != null) {
			setApplicantEmail(applicantEmail);
		}

		String applicantWebsite = (String)attributes.get("applicantWebsite");

		if (applicantWebsite != null) {
			setApplicantWebsite(applicantWebsite);
		}

		String signName = (String)attributes.get("signName");

		if (signName != null) {
			setSignName(signName);
		}

		String signTitle = (String)attributes.get("signTitle");

		if (signTitle != null) {
			setSignTitle(signTitle);
		}

		String signPlace = (String)attributes.get("signPlace");

		if (signPlace != null) {
			setSignPlace(signPlace);
		}

		Date signDate = (Date)attributes.get("signDate");

		if (signDate != null) {
			setSignDate(signDate);
		}

		String licenceNo = (String)attributes.get("licenceNo");

		if (licenceNo != null) {
			setLicenceNo(licenceNo);
		}

		String licenceName = (String)attributes.get("licenceName");

		if (licenceName != null) {
			setLicenceName(licenceName);
		}

		String govAgencyCode = (String)attributes.get("govAgencyCode");

		if (govAgencyCode != null) {
			setGovAgencyCode(govAgencyCode);
		}

		String govAgencyName = (String)attributes.get("govAgencyName");

		if (govAgencyName != null) {
			setGovAgencyName(govAgencyName);
		}

		String registrationNumber = (String)attributes.get("registrationNumber");

		if (registrationNumber != null) {
			setRegistrationNumber(registrationNumber);
		}

		String manufacturedYear = (String)attributes.get("manufacturedYear");

		if (manufacturedYear != null) {
			setManufacturedYear(manufacturedYear);
		}

		String technicalData = (String)attributes.get("technicalData");

		if (technicalData != null) {
			setTechnicalData(technicalData);
		}

		String trademarkCode = (String)attributes.get("trademarkCode");

		if (trademarkCode != null) {
			setTrademarkCode(trademarkCode);
		}

		String trademarkName = (String)attributes.get("trademarkName");

		if (trademarkName != null) {
			setTrademarkName(trademarkName);
		}

		String model = (String)attributes.get("model");

		if (model != null) {
			setModel(model);
		}

		String vehicleType = (String)attributes.get("vehicleType");

		if (vehicleType != null) {
			setVehicleType(vehicleType);
		}

		String vehicleColor = (String)attributes.get("vehicleColor");

		if (vehicleColor != null) {
			setVehicleColor(vehicleColor);
		}

		String engineNumber = (String)attributes.get("engineNumber");

		if (engineNumber != null) {
			setEngineNumber(engineNumber);
		}

		String chassisNumber = (String)attributes.get("chassisNumber");

		if (chassisNumber != null) {
			setChassisNumber(chassisNumber);
		}

		Date expiredDate = (Date)attributes.get("expiredDate");

		if (expiredDate != null) {
			setExpiredDate(expiredDate);
		}

		String borderGate = (String)attributes.get("borderGate");

		if (borderGate != null) {
			setBorderGate(borderGate);
		}

		String travelingArea = (String)attributes.get("travelingArea");

		if (travelingArea != null) {
			setTravelingArea(travelingArea);
		}

		String destination = (String)attributes.get("destination");

		if (destination != null) {
			setDestination(destination);
		}

		Date extendedUntil = (Date)attributes.get("extendedUntil");

		if (extendedUntil != null) {
			setExtendedUntil(extendedUntil);
		}

		String noticesOfExtension = (String)attributes.get("noticesOfExtension");

		if (noticesOfExtension != null) {
			setNoticesOfExtension(noticesOfExtension);
		}

		String purposeOfTheTrip = (String)attributes.get("purposeOfTheTrip");

		if (purposeOfTheTrip != null) {
			setPurposeOfTheTrip(purposeOfTheTrip);
		}

		String issuingDispatchNo = (String)attributes.get("issuingDispatchNo");

		if (issuingDispatchNo != null) {
			setIssuingDispatchNo(issuingDispatchNo);
		}

		String officialDispatchNo = (String)attributes.get("officialDispatchNo");

		if (officialDispatchNo != null) {
			setOfficialDispatchNo(officialDispatchNo);
		}

		Date officialDispatchDate = (Date)attributes.get("officialDispatchDate");

		if (officialDispatchDate != null) {
			setOfficialDispatchDate(officialDispatchDate);
		}

		String departureFrom = (String)attributes.get("departureFrom");

		if (departureFrom != null) {
			setDepartureFrom(departureFrom);
		}

		String departureTo = (String)attributes.get("departureTo");

		if (departureTo != null) {
			setDepartureTo(departureTo);
		}

		String fromParkingLot = (String)attributes.get("fromParkingLot");

		if (fromParkingLot != null) {
			setFromParkingLot(fromParkingLot);
		}

		String fromProvinceCode = (String)attributes.get("fromProvinceCode");

		if (fromProvinceCode != null) {
			setFromProvinceCode(fromProvinceCode);
		}

		String fromProvinceName = (String)attributes.get("fromProvinceName");

		if (fromProvinceName != null) {
			setFromProvinceName(fromProvinceName);
		}

		String toParkingLot = (String)attributes.get("toParkingLot");

		if (toParkingLot != null) {
			setToParkingLot(toParkingLot);
		}

		String toProvinceCode = (String)attributes.get("toProvinceCode");

		if (toProvinceCode != null) {
			setToProvinceCode(toProvinceCode);
		}

		String toProvinceName = (String)attributes.get("toProvinceName");

		if (toProvinceName != null) {
			setToProvinceName(toProvinceName);
		}

		String distance = (String)attributes.get("distance");

		if (distance != null) {
			setDistance(distance);
		}

		String routeDescription = (String)attributes.get("routeDescription");

		if (routeDescription != null) {
			setRouteDescription(routeDescription);
		}

		String expImpGateCode = (String)attributes.get("expImpGateCode");

		if (expImpGateCode != null) {
			setExpImpGateCode(expImpGateCode);
		}

		String expImpGate = (String)attributes.get("expImpGate");

		if (expImpGate != null) {
			setExpImpGate(expImpGate);
		}

		String itemNo = (String)attributes.get("itemNo");

		if (itemNo != null) {
			setItemNo(itemNo);
		}

		String circularNo = (String)attributes.get("circularNo");

		if (circularNo != null) {
			setCircularNo(circularNo);
		}

		Date circularDate = (Date)attributes.get("circularDate");

		if (circularDate != null) {
			setCircularDate(circularDate);
		}

		String numberOfVehicle = (String)attributes.get("numberOfVehicle");

		if (numberOfVehicle != null) {
			setNumberOfVehicle(numberOfVehicle);
		}

		String toVNAuthority = (String)attributes.get("toVNAuthority");

		if (toVNAuthority != null) {
			setToVNAuthority(toVNAuthority);
		}

		String toLAOAuthority = (String)attributes.get("toLAOAuthority");

		if (toLAOAuthority != null) {
			setToLAOAuthority(toLAOAuthority);
		}

		String atParkingLot = (String)attributes.get("atParkingLot");

		if (atParkingLot != null) {
			setAtParkingLot(atParkingLot);
		}

		String atProvinceName = (String)attributes.get("atProvinceName");

		if (atProvinceName != null) {
			setAtProvinceName(atProvinceName);
		}

		Long numberOfLot = (Long)attributes.get("numberOfLot");

		if (numberOfLot != null) {
			setNumberOfLot(numberOfLot);
		}

		String applicantContactName = (String)attributes.get(
				"applicantContactName");

		if (applicantContactName != null) {
			setApplicantContactName(applicantContactName);
		}

		String passenger = (String)attributes.get("passenger");

		if (passenger != null) {
			setPassenger(passenger);
		}

		String capacity = (String)attributes.get("capacity");

		if (capacity != null) {
			setCapacity(capacity);
		}

		String purpose = (String)attributes.get("purpose");

		if (purpose != null) {
			setPurpose(purpose);
		}

		String routes = (String)attributes.get("routes");

		if (routes != null) {
			setRoutes(routes);
		}

		String goodsType = (String)attributes.get("goodsType");

		if (goodsType != null) {
			setGoodsType(goodsType);
		}

		String stops = (String)attributes.get("stops");

		if (stops != null) {
			setStops(stops);
		}

		String licenceType = (String)attributes.get("licenceType");

		if (licenceType != null) {
			setLicenceType(licenceType);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_dossierId = dossierId;
	}

	@Override
	public long getDossierFileId() {
		return _dossierFileId;
	}

	@Override
	public void setDossierFileId(long dossierFileId) {
		_columnBitmask |= DOSSIERFILEID_COLUMN_BITMASK;

		if (!_setOriginalDossierFileId) {
			_setOriginalDossierFileId = true;

			_originalDossierFileId = _dossierFileId;
		}

		_dossierFileId = dossierFileId;
	}

	public long getOriginalDossierFileId() {
		return _originalDossierFileId;
	}

	@Override
	public String getDossierTemplateNo() {
		if (_dossierTemplateNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _dossierTemplateNo;
		}
	}

	@Override
	public void setDossierTemplateNo(String dossierTemplateNo) {
		_dossierTemplateNo = dossierTemplateNo;
	}

	@Override
	public String getDossierPartNo() {
		if (_dossierPartNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _dossierPartNo;
		}
	}

	@Override
	public void setDossierPartNo(String dossierPartNo) {
		_dossierPartNo = dossierPartNo;
	}

	@Override
	public String getFileTemplateNo() {
		if (_fileTemplateNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileTemplateNo;
		}
	}

	@Override
	public void setFileTemplateNo(String fileTemplateNo) {
		_fileTemplateNo = fileTemplateNo;
	}

	@Override
	public String getReferenceUid() {
		if (_referenceUid == null) {
			return StringPool.BLANK;
		}
		else {
			return _referenceUid;
		}
	}

	@Override
	public void setReferenceUid(String referenceUid) {
		_referenceUid = referenceUid;
	}

	@Override
	public String getServiceCode() {
		if (_serviceCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _serviceCode;
		}
	}

	@Override
	public void setServiceCode(String serviceCode) {
		_columnBitmask |= SERVICECODE_COLUMN_BITMASK;

		if (_originalServiceCode == null) {
			_originalServiceCode = _serviceCode;
		}

		_serviceCode = serviceCode;
	}

	public String getOriginalServiceCode() {
		return GetterUtil.getString(_originalServiceCode);
	}

	@Override
	public Date getValidFrom() {
		return _validFrom;
	}

	@Override
	public void setValidFrom(Date validFrom) {
		_columnBitmask = -1L;

		_validFrom = validFrom;
	}

	@Override
	public Date getValidUntil() {
		return _validUntil;
	}

	@Override
	public void setValidUntil(Date validUntil) {
		_validUntil = validUntil;
	}

	@Override
	public String getTransportOperation() {
		if (_transportOperation == null) {
			return StringPool.BLANK;
		}
		else {
			return _transportOperation;
		}
	}

	@Override
	public void setTransportOperation(String transportOperation) {
		_transportOperation = transportOperation;
	}

	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		_applicantName = applicantName;
	}

	@Override
	public String getApplicantIdNo() {
		if (_applicantIdNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantIdNo;
		}
	}

	@Override
	public void setApplicantIdNo(String applicantIdNo) {
		_columnBitmask |= APPLICANTIDNO_COLUMN_BITMASK;

		if (_originalApplicantIdNo == null) {
			_originalApplicantIdNo = _applicantIdNo;
		}

		_applicantIdNo = applicantIdNo;
	}

	public String getOriginalApplicantIdNo() {
		return GetterUtil.getString(_originalApplicantIdNo);
	}

	@Override
	public String getApplicantAddress() {
		if (_applicantAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantAddress;
		}
	}

	@Override
	public void setApplicantAddress(String applicantAddress) {
		_applicantAddress = applicantAddress;
	}

	@Override
	public String getApplicantTel() {
		if (_applicantTel == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantTel;
		}
	}

	@Override
	public void setApplicantTel(String applicantTel) {
		_applicantTel = applicantTel;
	}

	@Override
	public String getApplicantFax() {
		if (_applicantFax == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantFax;
		}
	}

	@Override
	public void setApplicantFax(String applicantFax) {
		_applicantFax = applicantFax;
	}

	@Override
	public String getApplicantEmail() {
		if (_applicantEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantEmail;
		}
	}

	@Override
	public void setApplicantEmail(String applicantEmail) {
		_applicantEmail = applicantEmail;
	}

	@Override
	public String getApplicantWebsite() {
		if (_applicantWebsite == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantWebsite;
		}
	}

	@Override
	public void setApplicantWebsite(String applicantWebsite) {
		_applicantWebsite = applicantWebsite;
	}

	@Override
	public String getSignName() {
		if (_signName == null) {
			return StringPool.BLANK;
		}
		else {
			return _signName;
		}
	}

	@Override
	public void setSignName(String signName) {
		_signName = signName;
	}

	@Override
	public String getSignTitle() {
		if (_signTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _signTitle;
		}
	}

	@Override
	public void setSignTitle(String signTitle) {
		_signTitle = signTitle;
	}

	@Override
	public String getSignPlace() {
		if (_signPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _signPlace;
		}
	}

	@Override
	public void setSignPlace(String signPlace) {
		_signPlace = signPlace;
	}

	@Override
	public Date getSignDate() {
		return _signDate;
	}

	@Override
	public void setSignDate(Date signDate) {
		_signDate = signDate;
	}

	@Override
	public String getLicenceNo() {
		if (_licenceNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _licenceNo;
		}
	}

	@Override
	public void setLicenceNo(String licenceNo) {
		_licenceNo = licenceNo;
	}

	@Override
	public String getLicenceName() {
		if (_licenceName == null) {
			return StringPool.BLANK;
		}
		else {
			return _licenceName;
		}
	}

	@Override
	public void setLicenceName(String licenceName) {
		_licenceName = licenceName;
	}

	@Override
	public String getGovAgencyCode() {
		if (_govAgencyCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _govAgencyCode;
		}
	}

	@Override
	public void setGovAgencyCode(String govAgencyCode) {
		_govAgencyCode = govAgencyCode;
	}

	@Override
	public String getGovAgencyName() {
		if (_govAgencyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _govAgencyName;
		}
	}

	@Override
	public void setGovAgencyName(String govAgencyName) {
		_govAgencyName = govAgencyName;
	}

	@Override
	public String getRegistrationNumber() {
		if (_registrationNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _registrationNumber;
		}
	}

	@Override
	public void setRegistrationNumber(String registrationNumber) {
		_columnBitmask |= REGISTRATIONNUMBER_COLUMN_BITMASK;

		if (_originalRegistrationNumber == null) {
			_originalRegistrationNumber = _registrationNumber;
		}

		_registrationNumber = registrationNumber;
	}

	public String getOriginalRegistrationNumber() {
		return GetterUtil.getString(_originalRegistrationNumber);
	}

	@Override
	public String getManufacturedYear() {
		if (_manufacturedYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturedYear;
		}
	}

	@Override
	public void setManufacturedYear(String manufacturedYear) {
		_manufacturedYear = manufacturedYear;
	}

	@Override
	public String getTechnicalData() {
		if (_technicalData == null) {
			return StringPool.BLANK;
		}
		else {
			return _technicalData;
		}
	}

	@Override
	public void setTechnicalData(String technicalData) {
		_technicalData = technicalData;
	}

	@Override
	public String getTrademarkCode() {
		if (_trademarkCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _trademarkCode;
		}
	}

	@Override
	public void setTrademarkCode(String trademarkCode) {
		_trademarkCode = trademarkCode;
	}

	@Override
	public String getTrademarkName() {
		if (_trademarkName == null) {
			return StringPool.BLANK;
		}
		else {
			return _trademarkName;
		}
	}

	@Override
	public void setTrademarkName(String trademarkName) {
		_trademarkName = trademarkName;
	}

	@Override
	public String getModel() {
		if (_model == null) {
			return StringPool.BLANK;
		}
		else {
			return _model;
		}
	}

	@Override
	public void setModel(String model) {
		_model = model;
	}

	@Override
	public String getVehicleType() {
		if (_vehicleType == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleType;
		}
	}

	@Override
	public void setVehicleType(String vehicleType) {
		_vehicleType = vehicleType;
	}

	@Override
	public String getVehicleColor() {
		if (_vehicleColor == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleColor;
		}
	}

	@Override
	public void setVehicleColor(String vehicleColor) {
		_vehicleColor = vehicleColor;
	}

	@Override
	public String getEngineNumber() {
		if (_engineNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _engineNumber;
		}
	}

	@Override
	public void setEngineNumber(String engineNumber) {
		_engineNumber = engineNumber;
	}

	@Override
	public String getChassisNumber() {
		if (_chassisNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _chassisNumber;
		}
	}

	@Override
	public void setChassisNumber(String chassisNumber) {
		_chassisNumber = chassisNumber;
	}

	@Override
	public Date getExpiredDate() {
		return _expiredDate;
	}

	@Override
	public void setExpiredDate(Date expiredDate) {
		_expiredDate = expiredDate;
	}

	@Override
	public String getBorderGate() {
		if (_borderGate == null) {
			return StringPool.BLANK;
		}
		else {
			return _borderGate;
		}
	}

	@Override
	public void setBorderGate(String borderGate) {
		_borderGate = borderGate;
	}

	@Override
	public String getTravelingArea() {
		if (_travelingArea == null) {
			return StringPool.BLANK;
		}
		else {
			return _travelingArea;
		}
	}

	@Override
	public void setTravelingArea(String travelingArea) {
		_travelingArea = travelingArea;
	}

	@Override
	public String getDestination() {
		if (_destination == null) {
			return StringPool.BLANK;
		}
		else {
			return _destination;
		}
	}

	@Override
	public void setDestination(String destination) {
		_destination = destination;
	}

	@Override
	public Date getExtendedUntil() {
		return _extendedUntil;
	}

	@Override
	public void setExtendedUntil(Date extendedUntil) {
		_extendedUntil = extendedUntil;
	}

	@Override
	public String getNoticesOfExtension() {
		if (_noticesOfExtension == null) {
			return StringPool.BLANK;
		}
		else {
			return _noticesOfExtension;
		}
	}

	@Override
	public void setNoticesOfExtension(String noticesOfExtension) {
		_noticesOfExtension = noticesOfExtension;
	}

	@Override
	public String getPurposeOfTheTrip() {
		if (_purposeOfTheTrip == null) {
			return StringPool.BLANK;
		}
		else {
			return _purposeOfTheTrip;
		}
	}

	@Override
	public void setPurposeOfTheTrip(String purposeOfTheTrip) {
		_purposeOfTheTrip = purposeOfTheTrip;
	}

	@Override
	public String getIssuingDispatchNo() {
		if (_issuingDispatchNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _issuingDispatchNo;
		}
	}

	@Override
	public void setIssuingDispatchNo(String issuingDispatchNo) {
		_issuingDispatchNo = issuingDispatchNo;
	}

	@Override
	public String getOfficialDispatchNo() {
		if (_officialDispatchNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _officialDispatchNo;
		}
	}

	@Override
	public void setOfficialDispatchNo(String officialDispatchNo) {
		_officialDispatchNo = officialDispatchNo;
	}

	@Override
	public Date getOfficialDispatchDate() {
		return _officialDispatchDate;
	}

	@Override
	public void setOfficialDispatchDate(Date officialDispatchDate) {
		_officialDispatchDate = officialDispatchDate;
	}

	@Override
	public String getDepartureFrom() {
		if (_departureFrom == null) {
			return StringPool.BLANK;
		}
		else {
			return _departureFrom;
		}
	}

	@Override
	public void setDepartureFrom(String departureFrom) {
		_departureFrom = departureFrom;
	}

	@Override
	public String getDepartureTo() {
		if (_departureTo == null) {
			return StringPool.BLANK;
		}
		else {
			return _departureTo;
		}
	}

	@Override
	public void setDepartureTo(String departureTo) {
		_departureTo = departureTo;
	}

	@Override
	public String getFromParkingLot() {
		if (_fromParkingLot == null) {
			return StringPool.BLANK;
		}
		else {
			return _fromParkingLot;
		}
	}

	@Override
	public void setFromParkingLot(String fromParkingLot) {
		_fromParkingLot = fromParkingLot;
	}

	@Override
	public String getFromProvinceCode() {
		if (_fromProvinceCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _fromProvinceCode;
		}
	}

	@Override
	public void setFromProvinceCode(String fromProvinceCode) {
		_fromProvinceCode = fromProvinceCode;
	}

	@Override
	public String getFromProvinceName() {
		if (_fromProvinceName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fromProvinceName;
		}
	}

	@Override
	public void setFromProvinceName(String fromProvinceName) {
		_fromProvinceName = fromProvinceName;
	}

	@Override
	public String getToParkingLot() {
		if (_toParkingLot == null) {
			return StringPool.BLANK;
		}
		else {
			return _toParkingLot;
		}
	}

	@Override
	public void setToParkingLot(String toParkingLot) {
		_toParkingLot = toParkingLot;
	}

	@Override
	public String getToProvinceCode() {
		if (_toProvinceCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _toProvinceCode;
		}
	}

	@Override
	public void setToProvinceCode(String toProvinceCode) {
		_toProvinceCode = toProvinceCode;
	}

	@Override
	public String getToProvinceName() {
		if (_toProvinceName == null) {
			return StringPool.BLANK;
		}
		else {
			return _toProvinceName;
		}
	}

	@Override
	public void setToProvinceName(String toProvinceName) {
		_toProvinceName = toProvinceName;
	}

	@Override
	public String getDistance() {
		if (_distance == null) {
			return StringPool.BLANK;
		}
		else {
			return _distance;
		}
	}

	@Override
	public void setDistance(String distance) {
		_distance = distance;
	}

	@Override
	public String getRouteDescription() {
		if (_routeDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _routeDescription;
		}
	}

	@Override
	public void setRouteDescription(String routeDescription) {
		_routeDescription = routeDescription;
	}

	@Override
	public String getExpImpGateCode() {
		if (_expImpGateCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _expImpGateCode;
		}
	}

	@Override
	public void setExpImpGateCode(String expImpGateCode) {
		_expImpGateCode = expImpGateCode;
	}

	@Override
	public String getExpImpGate() {
		if (_expImpGate == null) {
			return StringPool.BLANK;
		}
		else {
			return _expImpGate;
		}
	}

	@Override
	public void setExpImpGate(String expImpGate) {
		_expImpGate = expImpGate;
	}

	@Override
	public String getItemNo() {
		if (_itemNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemNo;
		}
	}

	@Override
	public void setItemNo(String itemNo) {
		_itemNo = itemNo;
	}

	@Override
	public String getCircularNo() {
		if (_circularNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _circularNo;
		}
	}

	@Override
	public void setCircularNo(String circularNo) {
		_circularNo = circularNo;
	}

	@Override
	public Date getCircularDate() {
		return _circularDate;
	}

	@Override
	public void setCircularDate(Date circularDate) {
		_circularDate = circularDate;
	}

	@Override
	public String getNumberOfVehicle() {
		if (_numberOfVehicle == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberOfVehicle;
		}
	}

	@Override
	public void setNumberOfVehicle(String numberOfVehicle) {
		_numberOfVehicle = numberOfVehicle;
	}

	@Override
	public String getToVNAuthority() {
		if (_toVNAuthority == null) {
			return StringPool.BLANK;
		}
		else {
			return _toVNAuthority;
		}
	}

	@Override
	public void setToVNAuthority(String toVNAuthority) {
		_toVNAuthority = toVNAuthority;
	}

	@Override
	public String getToLAOAuthority() {
		if (_toLAOAuthority == null) {
			return StringPool.BLANK;
		}
		else {
			return _toLAOAuthority;
		}
	}

	@Override
	public void setToLAOAuthority(String toLAOAuthority) {
		_toLAOAuthority = toLAOAuthority;
	}

	@Override
	public String getAtParkingLot() {
		if (_atParkingLot == null) {
			return StringPool.BLANK;
		}
		else {
			return _atParkingLot;
		}
	}

	@Override
	public void setAtParkingLot(String atParkingLot) {
		_atParkingLot = atParkingLot;
	}

	@Override
	public String getAtProvinceName() {
		if (_atProvinceName == null) {
			return StringPool.BLANK;
		}
		else {
			return _atProvinceName;
		}
	}

	@Override
	public void setAtProvinceName(String atProvinceName) {
		_atProvinceName = atProvinceName;
	}

	@Override
	public long getNumberOfLot() {
		return _numberOfLot;
	}

	@Override
	public void setNumberOfLot(long numberOfLot) {
		_numberOfLot = numberOfLot;
	}

	@Override
	public String getApplicantContactName() {
		if (_applicantContactName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantContactName;
		}
	}

	@Override
	public void setApplicantContactName(String applicantContactName) {
		_applicantContactName = applicantContactName;
	}

	@Override
	public String getPassenger() {
		if (_passenger == null) {
			return StringPool.BLANK;
		}
		else {
			return _passenger;
		}
	}

	@Override
	public void setPassenger(String passenger) {
		_passenger = passenger;
	}

	@Override
	public String getCapacity() {
		if (_capacity == null) {
			return StringPool.BLANK;
		}
		else {
			return _capacity;
		}
	}

	@Override
	public void setCapacity(String capacity) {
		_capacity = capacity;
	}

	@Override
	public String getPurpose() {
		if (_purpose == null) {
			return StringPool.BLANK;
		}
		else {
			return _purpose;
		}
	}

	@Override
	public void setPurpose(String purpose) {
		_purpose = purpose;
	}

	@Override
	public String getRoutes() {
		if (_routes == null) {
			return StringPool.BLANK;
		}
		else {
			return _routes;
		}
	}

	@Override
	public void setRoutes(String routes) {
		_routes = routes;
	}

	@Override
	public String getGoodsType() {
		if (_goodsType == null) {
			return StringPool.BLANK;
		}
		else {
			return _goodsType;
		}
	}

	@Override
	public void setGoodsType(String goodsType) {
		_goodsType = goodsType;
	}

	@Override
	public String getStops() {
		if (_stops == null) {
			return StringPool.BLANK;
		}
		else {
			return _stops;
		}
	}

	@Override
	public void setStops(String stops) {
		_stops = stops;
	}

	@Override
	public String getLicenceType() {
		if (_licenceType == null) {
			return StringPool.BLANK;
		}
		else {
			return _licenceType;
		}
	}

	@Override
	public void setLicenceType(String licenceType) {
		_licenceType = licenceType;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ILCertificate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ILCertificate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ILCertificate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ILCertificateImpl ilCertificateImpl = new ILCertificateImpl();

		ilCertificateImpl.setId(getId());
		ilCertificateImpl.setDossierId(getDossierId());
		ilCertificateImpl.setDossierFileId(getDossierFileId());
		ilCertificateImpl.setDossierTemplateNo(getDossierTemplateNo());
		ilCertificateImpl.setDossierPartNo(getDossierPartNo());
		ilCertificateImpl.setFileTemplateNo(getFileTemplateNo());
		ilCertificateImpl.setReferenceUid(getReferenceUid());
		ilCertificateImpl.setServiceCode(getServiceCode());
		ilCertificateImpl.setValidFrom(getValidFrom());
		ilCertificateImpl.setValidUntil(getValidUntil());
		ilCertificateImpl.setTransportOperation(getTransportOperation());
		ilCertificateImpl.setApplicantName(getApplicantName());
		ilCertificateImpl.setApplicantIdNo(getApplicantIdNo());
		ilCertificateImpl.setApplicantAddress(getApplicantAddress());
		ilCertificateImpl.setApplicantTel(getApplicantTel());
		ilCertificateImpl.setApplicantFax(getApplicantFax());
		ilCertificateImpl.setApplicantEmail(getApplicantEmail());
		ilCertificateImpl.setApplicantWebsite(getApplicantWebsite());
		ilCertificateImpl.setSignName(getSignName());
		ilCertificateImpl.setSignTitle(getSignTitle());
		ilCertificateImpl.setSignPlace(getSignPlace());
		ilCertificateImpl.setSignDate(getSignDate());
		ilCertificateImpl.setLicenceNo(getLicenceNo());
		ilCertificateImpl.setLicenceName(getLicenceName());
		ilCertificateImpl.setGovAgencyCode(getGovAgencyCode());
		ilCertificateImpl.setGovAgencyName(getGovAgencyName());
		ilCertificateImpl.setRegistrationNumber(getRegistrationNumber());
		ilCertificateImpl.setManufacturedYear(getManufacturedYear());
		ilCertificateImpl.setTechnicalData(getTechnicalData());
		ilCertificateImpl.setTrademarkCode(getTrademarkCode());
		ilCertificateImpl.setTrademarkName(getTrademarkName());
		ilCertificateImpl.setModel(getModel());
		ilCertificateImpl.setVehicleType(getVehicleType());
		ilCertificateImpl.setVehicleColor(getVehicleColor());
		ilCertificateImpl.setEngineNumber(getEngineNumber());
		ilCertificateImpl.setChassisNumber(getChassisNumber());
		ilCertificateImpl.setExpiredDate(getExpiredDate());
		ilCertificateImpl.setBorderGate(getBorderGate());
		ilCertificateImpl.setTravelingArea(getTravelingArea());
		ilCertificateImpl.setDestination(getDestination());
		ilCertificateImpl.setExtendedUntil(getExtendedUntil());
		ilCertificateImpl.setNoticesOfExtension(getNoticesOfExtension());
		ilCertificateImpl.setPurposeOfTheTrip(getPurposeOfTheTrip());
		ilCertificateImpl.setIssuingDispatchNo(getIssuingDispatchNo());
		ilCertificateImpl.setOfficialDispatchNo(getOfficialDispatchNo());
		ilCertificateImpl.setOfficialDispatchDate(getOfficialDispatchDate());
		ilCertificateImpl.setDepartureFrom(getDepartureFrom());
		ilCertificateImpl.setDepartureTo(getDepartureTo());
		ilCertificateImpl.setFromParkingLot(getFromParkingLot());
		ilCertificateImpl.setFromProvinceCode(getFromProvinceCode());
		ilCertificateImpl.setFromProvinceName(getFromProvinceName());
		ilCertificateImpl.setToParkingLot(getToParkingLot());
		ilCertificateImpl.setToProvinceCode(getToProvinceCode());
		ilCertificateImpl.setToProvinceName(getToProvinceName());
		ilCertificateImpl.setDistance(getDistance());
		ilCertificateImpl.setRouteDescription(getRouteDescription());
		ilCertificateImpl.setExpImpGateCode(getExpImpGateCode());
		ilCertificateImpl.setExpImpGate(getExpImpGate());
		ilCertificateImpl.setItemNo(getItemNo());
		ilCertificateImpl.setCircularNo(getCircularNo());
		ilCertificateImpl.setCircularDate(getCircularDate());
		ilCertificateImpl.setNumberOfVehicle(getNumberOfVehicle());
		ilCertificateImpl.setToVNAuthority(getToVNAuthority());
		ilCertificateImpl.setToLAOAuthority(getToLAOAuthority());
		ilCertificateImpl.setAtParkingLot(getAtParkingLot());
		ilCertificateImpl.setAtProvinceName(getAtProvinceName());
		ilCertificateImpl.setNumberOfLot(getNumberOfLot());
		ilCertificateImpl.setApplicantContactName(getApplicantContactName());
		ilCertificateImpl.setPassenger(getPassenger());
		ilCertificateImpl.setCapacity(getCapacity());
		ilCertificateImpl.setPurpose(getPurpose());
		ilCertificateImpl.setRoutes(getRoutes());
		ilCertificateImpl.setGoodsType(getGoodsType());
		ilCertificateImpl.setStops(getStops());
		ilCertificateImpl.setLicenceType(getLicenceType());
		ilCertificateImpl.setSyncDate(getSyncDate());

		ilCertificateImpl.resetOriginalValues();

		return ilCertificateImpl;
	}

	@Override
	public int compareTo(ILCertificate ilCertificate) {
		int value = 0;

		value = DateUtil.compareTo(getValidFrom(), ilCertificate.getValidFrom());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ILCertificate)) {
			return false;
		}

		ILCertificate ilCertificate = (ILCertificate)obj;

		long primaryKey = ilCertificate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ILCertificateModelImpl ilCertificateModelImpl = this;

		ilCertificateModelImpl._originalDossierFileId = ilCertificateModelImpl._dossierFileId;

		ilCertificateModelImpl._setOriginalDossierFileId = false;

		ilCertificateModelImpl._originalServiceCode = ilCertificateModelImpl._serviceCode;

		ilCertificateModelImpl._originalApplicantIdNo = ilCertificateModelImpl._applicantIdNo;

		ilCertificateModelImpl._originalRegistrationNumber = ilCertificateModelImpl._registrationNumber;

		ilCertificateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ILCertificate> toCacheModel() {
		ILCertificateCacheModel ilCertificateCacheModel = new ILCertificateCacheModel();

		ilCertificateCacheModel.id = getId();

		ilCertificateCacheModel.dossierId = getDossierId();

		ilCertificateCacheModel.dossierFileId = getDossierFileId();

		ilCertificateCacheModel.dossierTemplateNo = getDossierTemplateNo();

		String dossierTemplateNo = ilCertificateCacheModel.dossierTemplateNo;

		if ((dossierTemplateNo != null) && (dossierTemplateNo.length() == 0)) {
			ilCertificateCacheModel.dossierTemplateNo = null;
		}

		ilCertificateCacheModel.dossierPartNo = getDossierPartNo();

		String dossierPartNo = ilCertificateCacheModel.dossierPartNo;

		if ((dossierPartNo != null) && (dossierPartNo.length() == 0)) {
			ilCertificateCacheModel.dossierPartNo = null;
		}

		ilCertificateCacheModel.fileTemplateNo = getFileTemplateNo();

		String fileTemplateNo = ilCertificateCacheModel.fileTemplateNo;

		if ((fileTemplateNo != null) && (fileTemplateNo.length() == 0)) {
			ilCertificateCacheModel.fileTemplateNo = null;
		}

		ilCertificateCacheModel.referenceUid = getReferenceUid();

		String referenceUid = ilCertificateCacheModel.referenceUid;

		if ((referenceUid != null) && (referenceUid.length() == 0)) {
			ilCertificateCacheModel.referenceUid = null;
		}

		ilCertificateCacheModel.serviceCode = getServiceCode();

		String serviceCode = ilCertificateCacheModel.serviceCode;

		if ((serviceCode != null) && (serviceCode.length() == 0)) {
			ilCertificateCacheModel.serviceCode = null;
		}

		Date validFrom = getValidFrom();

		if (validFrom != null) {
			ilCertificateCacheModel.validFrom = validFrom.getTime();
		}
		else {
			ilCertificateCacheModel.validFrom = Long.MIN_VALUE;
		}

		Date validUntil = getValidUntil();

		if (validUntil != null) {
			ilCertificateCacheModel.validUntil = validUntil.getTime();
		}
		else {
			ilCertificateCacheModel.validUntil = Long.MIN_VALUE;
		}

		ilCertificateCacheModel.transportOperation = getTransportOperation();

		String transportOperation = ilCertificateCacheModel.transportOperation;

		if ((transportOperation != null) && (transportOperation.length() == 0)) {
			ilCertificateCacheModel.transportOperation = null;
		}

		ilCertificateCacheModel.applicantName = getApplicantName();

		String applicantName = ilCertificateCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			ilCertificateCacheModel.applicantName = null;
		}

		ilCertificateCacheModel.applicantIdNo = getApplicantIdNo();

		String applicantIdNo = ilCertificateCacheModel.applicantIdNo;

		if ((applicantIdNo != null) && (applicantIdNo.length() == 0)) {
			ilCertificateCacheModel.applicantIdNo = null;
		}

		ilCertificateCacheModel.applicantAddress = getApplicantAddress();

		String applicantAddress = ilCertificateCacheModel.applicantAddress;

		if ((applicantAddress != null) && (applicantAddress.length() == 0)) {
			ilCertificateCacheModel.applicantAddress = null;
		}

		ilCertificateCacheModel.applicantTel = getApplicantTel();

		String applicantTel = ilCertificateCacheModel.applicantTel;

		if ((applicantTel != null) && (applicantTel.length() == 0)) {
			ilCertificateCacheModel.applicantTel = null;
		}

		ilCertificateCacheModel.applicantFax = getApplicantFax();

		String applicantFax = ilCertificateCacheModel.applicantFax;

		if ((applicantFax != null) && (applicantFax.length() == 0)) {
			ilCertificateCacheModel.applicantFax = null;
		}

		ilCertificateCacheModel.applicantEmail = getApplicantEmail();

		String applicantEmail = ilCertificateCacheModel.applicantEmail;

		if ((applicantEmail != null) && (applicantEmail.length() == 0)) {
			ilCertificateCacheModel.applicantEmail = null;
		}

		ilCertificateCacheModel.applicantWebsite = getApplicantWebsite();

		String applicantWebsite = ilCertificateCacheModel.applicantWebsite;

		if ((applicantWebsite != null) && (applicantWebsite.length() == 0)) {
			ilCertificateCacheModel.applicantWebsite = null;
		}

		ilCertificateCacheModel.signName = getSignName();

		String signName = ilCertificateCacheModel.signName;

		if ((signName != null) && (signName.length() == 0)) {
			ilCertificateCacheModel.signName = null;
		}

		ilCertificateCacheModel.signTitle = getSignTitle();

		String signTitle = ilCertificateCacheModel.signTitle;

		if ((signTitle != null) && (signTitle.length() == 0)) {
			ilCertificateCacheModel.signTitle = null;
		}

		ilCertificateCacheModel.signPlace = getSignPlace();

		String signPlace = ilCertificateCacheModel.signPlace;

		if ((signPlace != null) && (signPlace.length() == 0)) {
			ilCertificateCacheModel.signPlace = null;
		}

		Date signDate = getSignDate();

		if (signDate != null) {
			ilCertificateCacheModel.signDate = signDate.getTime();
		}
		else {
			ilCertificateCacheModel.signDate = Long.MIN_VALUE;
		}

		ilCertificateCacheModel.licenceNo = getLicenceNo();

		String licenceNo = ilCertificateCacheModel.licenceNo;

		if ((licenceNo != null) && (licenceNo.length() == 0)) {
			ilCertificateCacheModel.licenceNo = null;
		}

		ilCertificateCacheModel.licenceName = getLicenceName();

		String licenceName = ilCertificateCacheModel.licenceName;

		if ((licenceName != null) && (licenceName.length() == 0)) {
			ilCertificateCacheModel.licenceName = null;
		}

		ilCertificateCacheModel.govAgencyCode = getGovAgencyCode();

		String govAgencyCode = ilCertificateCacheModel.govAgencyCode;

		if ((govAgencyCode != null) && (govAgencyCode.length() == 0)) {
			ilCertificateCacheModel.govAgencyCode = null;
		}

		ilCertificateCacheModel.govAgencyName = getGovAgencyName();

		String govAgencyName = ilCertificateCacheModel.govAgencyName;

		if ((govAgencyName != null) && (govAgencyName.length() == 0)) {
			ilCertificateCacheModel.govAgencyName = null;
		}

		ilCertificateCacheModel.registrationNumber = getRegistrationNumber();

		String registrationNumber = ilCertificateCacheModel.registrationNumber;

		if ((registrationNumber != null) && (registrationNumber.length() == 0)) {
			ilCertificateCacheModel.registrationNumber = null;
		}

		ilCertificateCacheModel.manufacturedYear = getManufacturedYear();

		String manufacturedYear = ilCertificateCacheModel.manufacturedYear;

		if ((manufacturedYear != null) && (manufacturedYear.length() == 0)) {
			ilCertificateCacheModel.manufacturedYear = null;
		}

		ilCertificateCacheModel.technicalData = getTechnicalData();

		String technicalData = ilCertificateCacheModel.technicalData;

		if ((technicalData != null) && (technicalData.length() == 0)) {
			ilCertificateCacheModel.technicalData = null;
		}

		ilCertificateCacheModel.trademarkCode = getTrademarkCode();

		String trademarkCode = ilCertificateCacheModel.trademarkCode;

		if ((trademarkCode != null) && (trademarkCode.length() == 0)) {
			ilCertificateCacheModel.trademarkCode = null;
		}

		ilCertificateCacheModel.trademarkName = getTrademarkName();

		String trademarkName = ilCertificateCacheModel.trademarkName;

		if ((trademarkName != null) && (trademarkName.length() == 0)) {
			ilCertificateCacheModel.trademarkName = null;
		}

		ilCertificateCacheModel.model = getModel();

		String model = ilCertificateCacheModel.model;

		if ((model != null) && (model.length() == 0)) {
			ilCertificateCacheModel.model = null;
		}

		ilCertificateCacheModel.vehicleType = getVehicleType();

		String vehicleType = ilCertificateCacheModel.vehicleType;

		if ((vehicleType != null) && (vehicleType.length() == 0)) {
			ilCertificateCacheModel.vehicleType = null;
		}

		ilCertificateCacheModel.vehicleColor = getVehicleColor();

		String vehicleColor = ilCertificateCacheModel.vehicleColor;

		if ((vehicleColor != null) && (vehicleColor.length() == 0)) {
			ilCertificateCacheModel.vehicleColor = null;
		}

		ilCertificateCacheModel.engineNumber = getEngineNumber();

		String engineNumber = ilCertificateCacheModel.engineNumber;

		if ((engineNumber != null) && (engineNumber.length() == 0)) {
			ilCertificateCacheModel.engineNumber = null;
		}

		ilCertificateCacheModel.chassisNumber = getChassisNumber();

		String chassisNumber = ilCertificateCacheModel.chassisNumber;

		if ((chassisNumber != null) && (chassisNumber.length() == 0)) {
			ilCertificateCacheModel.chassisNumber = null;
		}

		Date expiredDate = getExpiredDate();

		if (expiredDate != null) {
			ilCertificateCacheModel.expiredDate = expiredDate.getTime();
		}
		else {
			ilCertificateCacheModel.expiredDate = Long.MIN_VALUE;
		}

		ilCertificateCacheModel.borderGate = getBorderGate();

		String borderGate = ilCertificateCacheModel.borderGate;

		if ((borderGate != null) && (borderGate.length() == 0)) {
			ilCertificateCacheModel.borderGate = null;
		}

		ilCertificateCacheModel.travelingArea = getTravelingArea();

		String travelingArea = ilCertificateCacheModel.travelingArea;

		if ((travelingArea != null) && (travelingArea.length() == 0)) {
			ilCertificateCacheModel.travelingArea = null;
		}

		ilCertificateCacheModel.destination = getDestination();

		String destination = ilCertificateCacheModel.destination;

		if ((destination != null) && (destination.length() == 0)) {
			ilCertificateCacheModel.destination = null;
		}

		Date extendedUntil = getExtendedUntil();

		if (extendedUntil != null) {
			ilCertificateCacheModel.extendedUntil = extendedUntil.getTime();
		}
		else {
			ilCertificateCacheModel.extendedUntil = Long.MIN_VALUE;
		}

		ilCertificateCacheModel.noticesOfExtension = getNoticesOfExtension();

		String noticesOfExtension = ilCertificateCacheModel.noticesOfExtension;

		if ((noticesOfExtension != null) && (noticesOfExtension.length() == 0)) {
			ilCertificateCacheModel.noticesOfExtension = null;
		}

		ilCertificateCacheModel.purposeOfTheTrip = getPurposeOfTheTrip();

		String purposeOfTheTrip = ilCertificateCacheModel.purposeOfTheTrip;

		if ((purposeOfTheTrip != null) && (purposeOfTheTrip.length() == 0)) {
			ilCertificateCacheModel.purposeOfTheTrip = null;
		}

		ilCertificateCacheModel.issuingDispatchNo = getIssuingDispatchNo();

		String issuingDispatchNo = ilCertificateCacheModel.issuingDispatchNo;

		if ((issuingDispatchNo != null) && (issuingDispatchNo.length() == 0)) {
			ilCertificateCacheModel.issuingDispatchNo = null;
		}

		ilCertificateCacheModel.officialDispatchNo = getOfficialDispatchNo();

		String officialDispatchNo = ilCertificateCacheModel.officialDispatchNo;

		if ((officialDispatchNo != null) && (officialDispatchNo.length() == 0)) {
			ilCertificateCacheModel.officialDispatchNo = null;
		}

		Date officialDispatchDate = getOfficialDispatchDate();

		if (officialDispatchDate != null) {
			ilCertificateCacheModel.officialDispatchDate = officialDispatchDate.getTime();
		}
		else {
			ilCertificateCacheModel.officialDispatchDate = Long.MIN_VALUE;
		}

		ilCertificateCacheModel.departureFrom = getDepartureFrom();

		String departureFrom = ilCertificateCacheModel.departureFrom;

		if ((departureFrom != null) && (departureFrom.length() == 0)) {
			ilCertificateCacheModel.departureFrom = null;
		}

		ilCertificateCacheModel.departureTo = getDepartureTo();

		String departureTo = ilCertificateCacheModel.departureTo;

		if ((departureTo != null) && (departureTo.length() == 0)) {
			ilCertificateCacheModel.departureTo = null;
		}

		ilCertificateCacheModel.fromParkingLot = getFromParkingLot();

		String fromParkingLot = ilCertificateCacheModel.fromParkingLot;

		if ((fromParkingLot != null) && (fromParkingLot.length() == 0)) {
			ilCertificateCacheModel.fromParkingLot = null;
		}

		ilCertificateCacheModel.fromProvinceCode = getFromProvinceCode();

		String fromProvinceCode = ilCertificateCacheModel.fromProvinceCode;

		if ((fromProvinceCode != null) && (fromProvinceCode.length() == 0)) {
			ilCertificateCacheModel.fromProvinceCode = null;
		}

		ilCertificateCacheModel.fromProvinceName = getFromProvinceName();

		String fromProvinceName = ilCertificateCacheModel.fromProvinceName;

		if ((fromProvinceName != null) && (fromProvinceName.length() == 0)) {
			ilCertificateCacheModel.fromProvinceName = null;
		}

		ilCertificateCacheModel.toParkingLot = getToParkingLot();

		String toParkingLot = ilCertificateCacheModel.toParkingLot;

		if ((toParkingLot != null) && (toParkingLot.length() == 0)) {
			ilCertificateCacheModel.toParkingLot = null;
		}

		ilCertificateCacheModel.toProvinceCode = getToProvinceCode();

		String toProvinceCode = ilCertificateCacheModel.toProvinceCode;

		if ((toProvinceCode != null) && (toProvinceCode.length() == 0)) {
			ilCertificateCacheModel.toProvinceCode = null;
		}

		ilCertificateCacheModel.toProvinceName = getToProvinceName();

		String toProvinceName = ilCertificateCacheModel.toProvinceName;

		if ((toProvinceName != null) && (toProvinceName.length() == 0)) {
			ilCertificateCacheModel.toProvinceName = null;
		}

		ilCertificateCacheModel.distance = getDistance();

		String distance = ilCertificateCacheModel.distance;

		if ((distance != null) && (distance.length() == 0)) {
			ilCertificateCacheModel.distance = null;
		}

		ilCertificateCacheModel.routeDescription = getRouteDescription();

		String routeDescription = ilCertificateCacheModel.routeDescription;

		if ((routeDescription != null) && (routeDescription.length() == 0)) {
			ilCertificateCacheModel.routeDescription = null;
		}

		ilCertificateCacheModel.expImpGateCode = getExpImpGateCode();

		String expImpGateCode = ilCertificateCacheModel.expImpGateCode;

		if ((expImpGateCode != null) && (expImpGateCode.length() == 0)) {
			ilCertificateCacheModel.expImpGateCode = null;
		}

		ilCertificateCacheModel.expImpGate = getExpImpGate();

		String expImpGate = ilCertificateCacheModel.expImpGate;

		if ((expImpGate != null) && (expImpGate.length() == 0)) {
			ilCertificateCacheModel.expImpGate = null;
		}

		ilCertificateCacheModel.itemNo = getItemNo();

		String itemNo = ilCertificateCacheModel.itemNo;

		if ((itemNo != null) && (itemNo.length() == 0)) {
			ilCertificateCacheModel.itemNo = null;
		}

		ilCertificateCacheModel.circularNo = getCircularNo();

		String circularNo = ilCertificateCacheModel.circularNo;

		if ((circularNo != null) && (circularNo.length() == 0)) {
			ilCertificateCacheModel.circularNo = null;
		}

		Date circularDate = getCircularDate();

		if (circularDate != null) {
			ilCertificateCacheModel.circularDate = circularDate.getTime();
		}
		else {
			ilCertificateCacheModel.circularDate = Long.MIN_VALUE;
		}

		ilCertificateCacheModel.numberOfVehicle = getNumberOfVehicle();

		String numberOfVehicle = ilCertificateCacheModel.numberOfVehicle;

		if ((numberOfVehicle != null) && (numberOfVehicle.length() == 0)) {
			ilCertificateCacheModel.numberOfVehicle = null;
		}

		ilCertificateCacheModel.toVNAuthority = getToVNAuthority();

		String toVNAuthority = ilCertificateCacheModel.toVNAuthority;

		if ((toVNAuthority != null) && (toVNAuthority.length() == 0)) {
			ilCertificateCacheModel.toVNAuthority = null;
		}

		ilCertificateCacheModel.toLAOAuthority = getToLAOAuthority();

		String toLAOAuthority = ilCertificateCacheModel.toLAOAuthority;

		if ((toLAOAuthority != null) && (toLAOAuthority.length() == 0)) {
			ilCertificateCacheModel.toLAOAuthority = null;
		}

		ilCertificateCacheModel.atParkingLot = getAtParkingLot();

		String atParkingLot = ilCertificateCacheModel.atParkingLot;

		if ((atParkingLot != null) && (atParkingLot.length() == 0)) {
			ilCertificateCacheModel.atParkingLot = null;
		}

		ilCertificateCacheModel.atProvinceName = getAtProvinceName();

		String atProvinceName = ilCertificateCacheModel.atProvinceName;

		if ((atProvinceName != null) && (atProvinceName.length() == 0)) {
			ilCertificateCacheModel.atProvinceName = null;
		}

		ilCertificateCacheModel.numberOfLot = getNumberOfLot();

		ilCertificateCacheModel.applicantContactName = getApplicantContactName();

		String applicantContactName = ilCertificateCacheModel.applicantContactName;

		if ((applicantContactName != null) &&
				(applicantContactName.length() == 0)) {
			ilCertificateCacheModel.applicantContactName = null;
		}

		ilCertificateCacheModel.passenger = getPassenger();

		String passenger = ilCertificateCacheModel.passenger;

		if ((passenger != null) && (passenger.length() == 0)) {
			ilCertificateCacheModel.passenger = null;
		}

		ilCertificateCacheModel.capacity = getCapacity();

		String capacity = ilCertificateCacheModel.capacity;

		if ((capacity != null) && (capacity.length() == 0)) {
			ilCertificateCacheModel.capacity = null;
		}

		ilCertificateCacheModel.purpose = getPurpose();

		String purpose = ilCertificateCacheModel.purpose;

		if ((purpose != null) && (purpose.length() == 0)) {
			ilCertificateCacheModel.purpose = null;
		}

		ilCertificateCacheModel.routes = getRoutes();

		String routes = ilCertificateCacheModel.routes;

		if ((routes != null) && (routes.length() == 0)) {
			ilCertificateCacheModel.routes = null;
		}

		ilCertificateCacheModel.goodsType = getGoodsType();

		String goodsType = ilCertificateCacheModel.goodsType;

		if ((goodsType != null) && (goodsType.length() == 0)) {
			ilCertificateCacheModel.goodsType = null;
		}

		ilCertificateCacheModel.stops = getStops();

		String stops = ilCertificateCacheModel.stops;

		if ((stops != null) && (stops.length() == 0)) {
			ilCertificateCacheModel.stops = null;
		}

		ilCertificateCacheModel.licenceType = getLicenceType();

		String licenceType = ilCertificateCacheModel.licenceType;

		if ((licenceType != null) && (licenceType.length() == 0)) {
			ilCertificateCacheModel.licenceType = null;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			ilCertificateCacheModel.syncDate = syncDate.getTime();
		}
		else {
			ilCertificateCacheModel.syncDate = Long.MIN_VALUE;
		}

		return ilCertificateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(153);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", dossierFileId=");
		sb.append(getDossierFileId());
		sb.append(", dossierTemplateNo=");
		sb.append(getDossierTemplateNo());
		sb.append(", dossierPartNo=");
		sb.append(getDossierPartNo());
		sb.append(", fileTemplateNo=");
		sb.append(getFileTemplateNo());
		sb.append(", referenceUid=");
		sb.append(getReferenceUid());
		sb.append(", serviceCode=");
		sb.append(getServiceCode());
		sb.append(", validFrom=");
		sb.append(getValidFrom());
		sb.append(", validUntil=");
		sb.append(getValidUntil());
		sb.append(", transportOperation=");
		sb.append(getTransportOperation());
		sb.append(", applicantName=");
		sb.append(getApplicantName());
		sb.append(", applicantIdNo=");
		sb.append(getApplicantIdNo());
		sb.append(", applicantAddress=");
		sb.append(getApplicantAddress());
		sb.append(", applicantTel=");
		sb.append(getApplicantTel());
		sb.append(", applicantFax=");
		sb.append(getApplicantFax());
		sb.append(", applicantEmail=");
		sb.append(getApplicantEmail());
		sb.append(", applicantWebsite=");
		sb.append(getApplicantWebsite());
		sb.append(", signName=");
		sb.append(getSignName());
		sb.append(", signTitle=");
		sb.append(getSignTitle());
		sb.append(", signPlace=");
		sb.append(getSignPlace());
		sb.append(", signDate=");
		sb.append(getSignDate());
		sb.append(", licenceNo=");
		sb.append(getLicenceNo());
		sb.append(", licenceName=");
		sb.append(getLicenceName());
		sb.append(", govAgencyCode=");
		sb.append(getGovAgencyCode());
		sb.append(", govAgencyName=");
		sb.append(getGovAgencyName());
		sb.append(", registrationNumber=");
		sb.append(getRegistrationNumber());
		sb.append(", manufacturedYear=");
		sb.append(getManufacturedYear());
		sb.append(", technicalData=");
		sb.append(getTechnicalData());
		sb.append(", trademarkCode=");
		sb.append(getTrademarkCode());
		sb.append(", trademarkName=");
		sb.append(getTrademarkName());
		sb.append(", model=");
		sb.append(getModel());
		sb.append(", vehicleType=");
		sb.append(getVehicleType());
		sb.append(", vehicleColor=");
		sb.append(getVehicleColor());
		sb.append(", engineNumber=");
		sb.append(getEngineNumber());
		sb.append(", chassisNumber=");
		sb.append(getChassisNumber());
		sb.append(", expiredDate=");
		sb.append(getExpiredDate());
		sb.append(", borderGate=");
		sb.append(getBorderGate());
		sb.append(", travelingArea=");
		sb.append(getTravelingArea());
		sb.append(", destination=");
		sb.append(getDestination());
		sb.append(", extendedUntil=");
		sb.append(getExtendedUntil());
		sb.append(", noticesOfExtension=");
		sb.append(getNoticesOfExtension());
		sb.append(", purposeOfTheTrip=");
		sb.append(getPurposeOfTheTrip());
		sb.append(", issuingDispatchNo=");
		sb.append(getIssuingDispatchNo());
		sb.append(", officialDispatchNo=");
		sb.append(getOfficialDispatchNo());
		sb.append(", officialDispatchDate=");
		sb.append(getOfficialDispatchDate());
		sb.append(", departureFrom=");
		sb.append(getDepartureFrom());
		sb.append(", departureTo=");
		sb.append(getDepartureTo());
		sb.append(", fromParkingLot=");
		sb.append(getFromParkingLot());
		sb.append(", fromProvinceCode=");
		sb.append(getFromProvinceCode());
		sb.append(", fromProvinceName=");
		sb.append(getFromProvinceName());
		sb.append(", toParkingLot=");
		sb.append(getToParkingLot());
		sb.append(", toProvinceCode=");
		sb.append(getToProvinceCode());
		sb.append(", toProvinceName=");
		sb.append(getToProvinceName());
		sb.append(", distance=");
		sb.append(getDistance());
		sb.append(", routeDescription=");
		sb.append(getRouteDescription());
		sb.append(", expImpGateCode=");
		sb.append(getExpImpGateCode());
		sb.append(", expImpGate=");
		sb.append(getExpImpGate());
		sb.append(", itemNo=");
		sb.append(getItemNo());
		sb.append(", circularNo=");
		sb.append(getCircularNo());
		sb.append(", circularDate=");
		sb.append(getCircularDate());
		sb.append(", numberOfVehicle=");
		sb.append(getNumberOfVehicle());
		sb.append(", toVNAuthority=");
		sb.append(getToVNAuthority());
		sb.append(", toLAOAuthority=");
		sb.append(getToLAOAuthority());
		sb.append(", atParkingLot=");
		sb.append(getAtParkingLot());
		sb.append(", atProvinceName=");
		sb.append(getAtProvinceName());
		sb.append(", numberOfLot=");
		sb.append(getNumberOfLot());
		sb.append(", applicantContactName=");
		sb.append(getApplicantContactName());
		sb.append(", passenger=");
		sb.append(getPassenger());
		sb.append(", capacity=");
		sb.append(getCapacity());
		sb.append(", purpose=");
		sb.append(getPurpose());
		sb.append(", routes=");
		sb.append(getRoutes());
		sb.append(", goodsType=");
		sb.append(getGoodsType());
		sb.append(", stops=");
		sb.append(getStops());
		sb.append(", licenceType=");
		sb.append(getLicenceType());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(232);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.ILCertificate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierFileId</column-name><column-value><![CDATA[");
		sb.append(getDossierFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierTemplateNo</column-name><column-value><![CDATA[");
		sb.append(getDossierTemplateNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierPartNo</column-name><column-value><![CDATA[");
		sb.append(getDossierPartNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileTemplateNo</column-name><column-value><![CDATA[");
		sb.append(getFileTemplateNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>referenceUid</column-name><column-value><![CDATA[");
		sb.append(getReferenceUid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceCode</column-name><column-value><![CDATA[");
		sb.append(getServiceCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validFrom</column-name><column-value><![CDATA[");
		sb.append(getValidFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validUntil</column-name><column-value><![CDATA[");
		sb.append(getValidUntil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>transportOperation</column-name><column-value><![CDATA[");
		sb.append(getTransportOperation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantName</column-name><column-value><![CDATA[");
		sb.append(getApplicantName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantIdNo</column-name><column-value><![CDATA[");
		sb.append(getApplicantIdNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantAddress</column-name><column-value><![CDATA[");
		sb.append(getApplicantAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantTel</column-name><column-value><![CDATA[");
		sb.append(getApplicantTel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantFax</column-name><column-value><![CDATA[");
		sb.append(getApplicantFax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantEmail</column-name><column-value><![CDATA[");
		sb.append(getApplicantEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantWebsite</column-name><column-value><![CDATA[");
		sb.append(getApplicantWebsite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signName</column-name><column-value><![CDATA[");
		sb.append(getSignName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signTitle</column-name><column-value><![CDATA[");
		sb.append(getSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signPlace</column-name><column-value><![CDATA[");
		sb.append(getSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signDate</column-name><column-value><![CDATA[");
		sb.append(getSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>licenceNo</column-name><column-value><![CDATA[");
		sb.append(getLicenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>licenceName</column-name><column-value><![CDATA[");
		sb.append(getLicenceName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>govAgencyCode</column-name><column-value><![CDATA[");
		sb.append(getGovAgencyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>govAgencyName</column-name><column-value><![CDATA[");
		sb.append(getGovAgencyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registrationNumber</column-name><column-value><![CDATA[");
		sb.append(getRegistrationNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturedYear</column-name><column-value><![CDATA[");
		sb.append(getManufacturedYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>technicalData</column-name><column-value><![CDATA[");
		sb.append(getTechnicalData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trademarkCode</column-name><column-value><![CDATA[");
		sb.append(getTrademarkCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trademarkName</column-name><column-value><![CDATA[");
		sb.append(getTrademarkName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>model</column-name><column-value><![CDATA[");
		sb.append(getModel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleType</column-name><column-value><![CDATA[");
		sb.append(getVehicleType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleColor</column-name><column-value><![CDATA[");
		sb.append(getVehicleColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>engineNumber</column-name><column-value><![CDATA[");
		sb.append(getEngineNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chassisNumber</column-name><column-value><![CDATA[");
		sb.append(getChassisNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiredDate</column-name><column-value><![CDATA[");
		sb.append(getExpiredDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>borderGate</column-name><column-value><![CDATA[");
		sb.append(getBorderGate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>travelingArea</column-name><column-value><![CDATA[");
		sb.append(getTravelingArea());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>destination</column-name><column-value><![CDATA[");
		sb.append(getDestination());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>extendedUntil</column-name><column-value><![CDATA[");
		sb.append(getExtendedUntil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noticesOfExtension</column-name><column-value><![CDATA[");
		sb.append(getNoticesOfExtension());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purposeOfTheTrip</column-name><column-value><![CDATA[");
		sb.append(getPurposeOfTheTrip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issuingDispatchNo</column-name><column-value><![CDATA[");
		sb.append(getIssuingDispatchNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>officialDispatchNo</column-name><column-value><![CDATA[");
		sb.append(getOfficialDispatchNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>officialDispatchDate</column-name><column-value><![CDATA[");
		sb.append(getOfficialDispatchDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departureFrom</column-name><column-value><![CDATA[");
		sb.append(getDepartureFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departureTo</column-name><column-value><![CDATA[");
		sb.append(getDepartureTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromParkingLot</column-name><column-value><![CDATA[");
		sb.append(getFromParkingLot());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromProvinceCode</column-name><column-value><![CDATA[");
		sb.append(getFromProvinceCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromProvinceName</column-name><column-value><![CDATA[");
		sb.append(getFromProvinceName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toParkingLot</column-name><column-value><![CDATA[");
		sb.append(getToParkingLot());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toProvinceCode</column-name><column-value><![CDATA[");
		sb.append(getToProvinceCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toProvinceName</column-name><column-value><![CDATA[");
		sb.append(getToProvinceName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>distance</column-name><column-value><![CDATA[");
		sb.append(getDistance());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>routeDescription</column-name><column-value><![CDATA[");
		sb.append(getRouteDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expImpGateCode</column-name><column-value><![CDATA[");
		sb.append(getExpImpGateCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expImpGate</column-name><column-value><![CDATA[");
		sb.append(getExpImpGate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemNo</column-name><column-value><![CDATA[");
		sb.append(getItemNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>circularNo</column-name><column-value><![CDATA[");
		sb.append(getCircularNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>circularDate</column-name><column-value><![CDATA[");
		sb.append(getCircularDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfVehicle</column-name><column-value><![CDATA[");
		sb.append(getNumberOfVehicle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toVNAuthority</column-name><column-value><![CDATA[");
		sb.append(getToVNAuthority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toLAOAuthority</column-name><column-value><![CDATA[");
		sb.append(getToLAOAuthority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>atParkingLot</column-name><column-value><![CDATA[");
		sb.append(getAtParkingLot());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>atProvinceName</column-name><column-value><![CDATA[");
		sb.append(getAtProvinceName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfLot</column-name><column-value><![CDATA[");
		sb.append(getNumberOfLot());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantContactName</column-name><column-value><![CDATA[");
		sb.append(getApplicantContactName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passenger</column-name><column-value><![CDATA[");
		sb.append(getPassenger());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>capacity</column-name><column-value><![CDATA[");
		sb.append(getCapacity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purpose</column-name><column-value><![CDATA[");
		sb.append(getPurpose());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>routes</column-name><column-value><![CDATA[");
		sb.append(getRoutes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>goodsType</column-name><column-value><![CDATA[");
		sb.append(getGoodsType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stops</column-name><column-value><![CDATA[");
		sb.append(getStops());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>licenceType</column-name><column-value><![CDATA[");
		sb.append(getLicenceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ILCertificate.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ILCertificate.class
		};
	private long _id;
	private long _dossierId;
	private long _dossierFileId;
	private long _originalDossierFileId;
	private boolean _setOriginalDossierFileId;
	private String _dossierTemplateNo;
	private String _dossierPartNo;
	private String _fileTemplateNo;
	private String _referenceUid;
	private String _serviceCode;
	private String _originalServiceCode;
	private Date _validFrom;
	private Date _validUntil;
	private String _transportOperation;
	private String _applicantName;
	private String _applicantIdNo;
	private String _originalApplicantIdNo;
	private String _applicantAddress;
	private String _applicantTel;
	private String _applicantFax;
	private String _applicantEmail;
	private String _applicantWebsite;
	private String _signName;
	private String _signTitle;
	private String _signPlace;
	private Date _signDate;
	private String _licenceNo;
	private String _licenceName;
	private String _govAgencyCode;
	private String _govAgencyName;
	private String _registrationNumber;
	private String _originalRegistrationNumber;
	private String _manufacturedYear;
	private String _technicalData;
	private String _trademarkCode;
	private String _trademarkName;
	private String _model;
	private String _vehicleType;
	private String _vehicleColor;
	private String _engineNumber;
	private String _chassisNumber;
	private Date _expiredDate;
	private String _borderGate;
	private String _travelingArea;
	private String _destination;
	private Date _extendedUntil;
	private String _noticesOfExtension;
	private String _purposeOfTheTrip;
	private String _issuingDispatchNo;
	private String _officialDispatchNo;
	private Date _officialDispatchDate;
	private String _departureFrom;
	private String _departureTo;
	private String _fromParkingLot;
	private String _fromProvinceCode;
	private String _fromProvinceName;
	private String _toParkingLot;
	private String _toProvinceCode;
	private String _toProvinceName;
	private String _distance;
	private String _routeDescription;
	private String _expImpGateCode;
	private String _expImpGate;
	private String _itemNo;
	private String _circularNo;
	private Date _circularDate;
	private String _numberOfVehicle;
	private String _toVNAuthority;
	private String _toLAOAuthority;
	private String _atParkingLot;
	private String _atProvinceName;
	private long _numberOfLot;
	private String _applicantContactName;
	private String _passenger;
	private String _capacity;
	private String _purpose;
	private String _routes;
	private String _goodsType;
	private String _stops;
	private String _licenceType;
	private Date _syncDate;
	private long _columnBitmask;
	private ILCertificate _escapedModel;
}