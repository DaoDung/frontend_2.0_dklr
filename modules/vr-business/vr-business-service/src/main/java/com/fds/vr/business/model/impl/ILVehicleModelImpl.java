/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.vr.business.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.fds.vr.business.model.ILVehicle;
import com.fds.vr.business.model.ILVehicleModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ILVehicle service. Represents a row in the &quot;il_vehicle&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ILVehicleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ILVehicleImpl}.
 * </p>
 *
 * @author LamTV
 * @see ILVehicleImpl
 * @see ILVehicle
 * @see ILVehicleModel
 * @generated
 */
@ProviderType
public class ILVehicleModelImpl extends BaseModelImpl<ILVehicle>
	implements ILVehicleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a il vehicle model instance should use the {@link ILVehicle} interface instead.
	 */
	public static final String TABLE_NAME = "il_vehicle";
	public static final Object[][] TABLE_COLUMNS = {
			{ "vehicleId", Types.BIGINT },
			{ "issuingDispatchNo", Types.VARCHAR },
			{ "sequenceNo", Types.INTEGER },
			{ "registrationNumber", Types.VARCHAR },
			{ "registrationDriver", Types.VARCHAR },
			{ "vehicleModelCode", Types.VARCHAR },
			{ "vehicleModelName", Types.VARCHAR },
			{ "capacity", Types.VARCHAR },
			{ "manufacturedYear", Types.VARCHAR },
			{ "vehicleExpImpGateCode", Types.VARCHAR },
			{ "vehicleExpImpGate", Types.VARCHAR },
			{ "operationType", Types.VARCHAR },
			{ "passengerOrCargo", Types.VARCHAR },
			{ "lienVanNo", Types.VARCHAR },
			{ "syncDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("vehicleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("issuingDispatchNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sequenceNo", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("registrationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("registrationDriver", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vehicleModelCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vehicleModelName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("capacity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturedYear", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vehicleExpImpGateCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vehicleExpImpGate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("operationType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("passengerOrCargo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lienVanNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table il_vehicle (vehicleId LONG not null primary key,issuingDispatchNo VARCHAR(75) null,sequenceNo INTEGER,registrationNumber VARCHAR(75) null,registrationDriver VARCHAR(75) null,vehicleModelCode VARCHAR(75) null,vehicleModelName VARCHAR(75) null,capacity VARCHAR(75) null,manufacturedYear VARCHAR(75) null,vehicleExpImpGateCode VARCHAR(75) null,vehicleExpImpGate VARCHAR(75) null,operationType VARCHAR(75) null,passengerOrCargo VARCHAR(75) null,lienVanNo VARCHAR(75) null,syncDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table il_vehicle";
	public static final String ORDER_BY_JPQL = " ORDER BY ilVehicle.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY il_vehicle.vehicleId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fds.vr.business.model.ILVehicle"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fds.vr.business.model.ILVehicle"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.fds.vr.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fds.vr.business.model.ILVehicle"),
			true);
	public static final long ISSUINGDISPATCHNO_COLUMN_BITMASK = 1L;
	public static final long ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.fds.vr.service.util.ServiceProps.get(
				"lock.expiration.time.com.fds.vr.business.model.ILVehicle"));

	public ILVehicleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ILVehicle.class;
	}

	@Override
	public String getModelClassName() {
		return ILVehicle.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("issuingDispatchNo", getIssuingDispatchNo());
		attributes.put("sequenceNo", getSequenceNo());
		attributes.put("registrationNumber", getRegistrationNumber());
		attributes.put("registrationDriver", getRegistrationDriver());
		attributes.put("vehicleModelCode", getVehicleModelCode());
		attributes.put("vehicleModelName", getVehicleModelName());
		attributes.put("capacity", getCapacity());
		attributes.put("manufacturedYear", getManufacturedYear());
		attributes.put("vehicleExpImpGateCode", getVehicleExpImpGateCode());
		attributes.put("vehicleExpImpGate", getVehicleExpImpGate());
		attributes.put("operationType", getOperationType());
		attributes.put("passengerOrCargo", getPassengerOrCargo());
		attributes.put("lienVanNo", getLienVanNo());
		attributes.put("syncDate", getSyncDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String issuingDispatchNo = (String)attributes.get("issuingDispatchNo");

		if (issuingDispatchNo != null) {
			setIssuingDispatchNo(issuingDispatchNo);
		}

		Integer sequenceNo = (Integer)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}

		String registrationNumber = (String)attributes.get("registrationNumber");

		if (registrationNumber != null) {
			setRegistrationNumber(registrationNumber);
		}

		String registrationDriver = (String)attributes.get("registrationDriver");

		if (registrationDriver != null) {
			setRegistrationDriver(registrationDriver);
		}

		String vehicleModelCode = (String)attributes.get("vehicleModelCode");

		if (vehicleModelCode != null) {
			setVehicleModelCode(vehicleModelCode);
		}

		String vehicleModelName = (String)attributes.get("vehicleModelName");

		if (vehicleModelName != null) {
			setVehicleModelName(vehicleModelName);
		}

		String capacity = (String)attributes.get("capacity");

		if (capacity != null) {
			setCapacity(capacity);
		}

		String manufacturedYear = (String)attributes.get("manufacturedYear");

		if (manufacturedYear != null) {
			setManufacturedYear(manufacturedYear);
		}

		String vehicleExpImpGateCode = (String)attributes.get(
				"vehicleExpImpGateCode");

		if (vehicleExpImpGateCode != null) {
			setVehicleExpImpGateCode(vehicleExpImpGateCode);
		}

		String vehicleExpImpGate = (String)attributes.get("vehicleExpImpGate");

		if (vehicleExpImpGate != null) {
			setVehicleExpImpGate(vehicleExpImpGate);
		}

		String operationType = (String)attributes.get("operationType");

		if (operationType != null) {
			setOperationType(operationType);
		}

		String passengerOrCargo = (String)attributes.get("passengerOrCargo");

		if (passengerOrCargo != null) {
			setPassengerOrCargo(passengerOrCargo);
		}

		String lienVanNo = (String)attributes.get("lienVanNo");

		if (lienVanNo != null) {
			setLienVanNo(lienVanNo);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getIssuingDispatchNo() {
		if (_issuingDispatchNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _issuingDispatchNo;
		}
	}

	@Override
	public void setIssuingDispatchNo(String issuingDispatchNo) {
		_columnBitmask |= ISSUINGDISPATCHNO_COLUMN_BITMASK;

		if (_originalIssuingDispatchNo == null) {
			_originalIssuingDispatchNo = _issuingDispatchNo;
		}

		_issuingDispatchNo = issuingDispatchNo;
	}

	public String getOriginalIssuingDispatchNo() {
		return GetterUtil.getString(_originalIssuingDispatchNo);
	}

	@Override
	public int getSequenceNo() {
		return _sequenceNo;
	}

	@Override
	public void setSequenceNo(int sequenceNo) {
		_sequenceNo = sequenceNo;
	}

	@Override
	public String getRegistrationNumber() {
		if (_registrationNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _registrationNumber;
		}
	}

	@Override
	public void setRegistrationNumber(String registrationNumber) {
		_registrationNumber = registrationNumber;
	}

	@Override
	public String getRegistrationDriver() {
		if (_registrationDriver == null) {
			return StringPool.BLANK;
		}
		else {
			return _registrationDriver;
		}
	}

	@Override
	public void setRegistrationDriver(String registrationDriver) {
		_registrationDriver = registrationDriver;
	}

	@Override
	public String getVehicleModelCode() {
		if (_vehicleModelCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleModelCode;
		}
	}

	@Override
	public void setVehicleModelCode(String vehicleModelCode) {
		_vehicleModelCode = vehicleModelCode;
	}

	@Override
	public String getVehicleModelName() {
		if (_vehicleModelName == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleModelName;
		}
	}

	@Override
	public void setVehicleModelName(String vehicleModelName) {
		_vehicleModelName = vehicleModelName;
	}

	@Override
	public String getCapacity() {
		if (_capacity == null) {
			return StringPool.BLANK;
		}
		else {
			return _capacity;
		}
	}

	@Override
	public void setCapacity(String capacity) {
		_capacity = capacity;
	}

	@Override
	public String getManufacturedYear() {
		if (_manufacturedYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturedYear;
		}
	}

	@Override
	public void setManufacturedYear(String manufacturedYear) {
		_manufacturedYear = manufacturedYear;
	}

	@Override
	public String getVehicleExpImpGateCode() {
		if (_vehicleExpImpGateCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleExpImpGateCode;
		}
	}

	@Override
	public void setVehicleExpImpGateCode(String vehicleExpImpGateCode) {
		_vehicleExpImpGateCode = vehicleExpImpGateCode;
	}

	@Override
	public String getVehicleExpImpGate() {
		if (_vehicleExpImpGate == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleExpImpGate;
		}
	}

	@Override
	public void setVehicleExpImpGate(String vehicleExpImpGate) {
		_vehicleExpImpGate = vehicleExpImpGate;
	}

	@Override
	public String getOperationType() {
		if (_operationType == null) {
			return StringPool.BLANK;
		}
		else {
			return _operationType;
		}
	}

	@Override
	public void setOperationType(String operationType) {
		_operationType = operationType;
	}

	@Override
	public String getPassengerOrCargo() {
		if (_passengerOrCargo == null) {
			return StringPool.BLANK;
		}
		else {
			return _passengerOrCargo;
		}
	}

	@Override
	public void setPassengerOrCargo(String passengerOrCargo) {
		_passengerOrCargo = passengerOrCargo;
	}

	@Override
	public String getLienVanNo() {
		if (_lienVanNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _lienVanNo;
		}
	}

	@Override
	public void setLienVanNo(String lienVanNo) {
		_lienVanNo = lienVanNo;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_syncDate = syncDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ILVehicle.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ILVehicle toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ILVehicle)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ILVehicleImpl ilVehicleImpl = new ILVehicleImpl();

		ilVehicleImpl.setId(getId());
		ilVehicleImpl.setIssuingDispatchNo(getIssuingDispatchNo());
		ilVehicleImpl.setSequenceNo(getSequenceNo());
		ilVehicleImpl.setRegistrationNumber(getRegistrationNumber());
		ilVehicleImpl.setRegistrationDriver(getRegistrationDriver());
		ilVehicleImpl.setVehicleModelCode(getVehicleModelCode());
		ilVehicleImpl.setVehicleModelName(getVehicleModelName());
		ilVehicleImpl.setCapacity(getCapacity());
		ilVehicleImpl.setManufacturedYear(getManufacturedYear());
		ilVehicleImpl.setVehicleExpImpGateCode(getVehicleExpImpGateCode());
		ilVehicleImpl.setVehicleExpImpGate(getVehicleExpImpGate());
		ilVehicleImpl.setOperationType(getOperationType());
		ilVehicleImpl.setPassengerOrCargo(getPassengerOrCargo());
		ilVehicleImpl.setLienVanNo(getLienVanNo());
		ilVehicleImpl.setSyncDate(getSyncDate());

		ilVehicleImpl.resetOriginalValues();

		return ilVehicleImpl;
	}

	@Override
	public int compareTo(ILVehicle ilVehicle) {
		long primaryKey = ilVehicle.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ILVehicle)) {
			return false;
		}

		ILVehicle ilVehicle = (ILVehicle)obj;

		long primaryKey = ilVehicle.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ILVehicleModelImpl ilVehicleModelImpl = this;

		ilVehicleModelImpl._originalIssuingDispatchNo = ilVehicleModelImpl._issuingDispatchNo;

		ilVehicleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ILVehicle> toCacheModel() {
		ILVehicleCacheModel ilVehicleCacheModel = new ILVehicleCacheModel();

		ilVehicleCacheModel.id = getId();

		ilVehicleCacheModel.issuingDispatchNo = getIssuingDispatchNo();

		String issuingDispatchNo = ilVehicleCacheModel.issuingDispatchNo;

		if ((issuingDispatchNo != null) && (issuingDispatchNo.length() == 0)) {
			ilVehicleCacheModel.issuingDispatchNo = null;
		}

		ilVehicleCacheModel.sequenceNo = getSequenceNo();

		ilVehicleCacheModel.registrationNumber = getRegistrationNumber();

		String registrationNumber = ilVehicleCacheModel.registrationNumber;

		if ((registrationNumber != null) && (registrationNumber.length() == 0)) {
			ilVehicleCacheModel.registrationNumber = null;
		}

		ilVehicleCacheModel.registrationDriver = getRegistrationDriver();

		String registrationDriver = ilVehicleCacheModel.registrationDriver;

		if ((registrationDriver != null) && (registrationDriver.length() == 0)) {
			ilVehicleCacheModel.registrationDriver = null;
		}

		ilVehicleCacheModel.vehicleModelCode = getVehicleModelCode();

		String vehicleModelCode = ilVehicleCacheModel.vehicleModelCode;

		if ((vehicleModelCode != null) && (vehicleModelCode.length() == 0)) {
			ilVehicleCacheModel.vehicleModelCode = null;
		}

		ilVehicleCacheModel.vehicleModelName = getVehicleModelName();

		String vehicleModelName = ilVehicleCacheModel.vehicleModelName;

		if ((vehicleModelName != null) && (vehicleModelName.length() == 0)) {
			ilVehicleCacheModel.vehicleModelName = null;
		}

		ilVehicleCacheModel.capacity = getCapacity();

		String capacity = ilVehicleCacheModel.capacity;

		if ((capacity != null) && (capacity.length() == 0)) {
			ilVehicleCacheModel.capacity = null;
		}

		ilVehicleCacheModel.manufacturedYear = getManufacturedYear();

		String manufacturedYear = ilVehicleCacheModel.manufacturedYear;

		if ((manufacturedYear != null) && (manufacturedYear.length() == 0)) {
			ilVehicleCacheModel.manufacturedYear = null;
		}

		ilVehicleCacheModel.vehicleExpImpGateCode = getVehicleExpImpGateCode();

		String vehicleExpImpGateCode = ilVehicleCacheModel.vehicleExpImpGateCode;

		if ((vehicleExpImpGateCode != null) &&
				(vehicleExpImpGateCode.length() == 0)) {
			ilVehicleCacheModel.vehicleExpImpGateCode = null;
		}

		ilVehicleCacheModel.vehicleExpImpGate = getVehicleExpImpGate();

		String vehicleExpImpGate = ilVehicleCacheModel.vehicleExpImpGate;

		if ((vehicleExpImpGate != null) && (vehicleExpImpGate.length() == 0)) {
			ilVehicleCacheModel.vehicleExpImpGate = null;
		}

		ilVehicleCacheModel.operationType = getOperationType();

		String operationType = ilVehicleCacheModel.operationType;

		if ((operationType != null) && (operationType.length() == 0)) {
			ilVehicleCacheModel.operationType = null;
		}

		ilVehicleCacheModel.passengerOrCargo = getPassengerOrCargo();

		String passengerOrCargo = ilVehicleCacheModel.passengerOrCargo;

		if ((passengerOrCargo != null) && (passengerOrCargo.length() == 0)) {
			ilVehicleCacheModel.passengerOrCargo = null;
		}

		ilVehicleCacheModel.lienVanNo = getLienVanNo();

		String lienVanNo = ilVehicleCacheModel.lienVanNo;

		if ((lienVanNo != null) && (lienVanNo.length() == 0)) {
			ilVehicleCacheModel.lienVanNo = null;
		}

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			ilVehicleCacheModel.syncDate = syncDate.getTime();
		}
		else {
			ilVehicleCacheModel.syncDate = Long.MIN_VALUE;
		}

		return ilVehicleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", issuingDispatchNo=");
		sb.append(getIssuingDispatchNo());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append(", registrationNumber=");
		sb.append(getRegistrationNumber());
		sb.append(", registrationDriver=");
		sb.append(getRegistrationDriver());
		sb.append(", vehicleModelCode=");
		sb.append(getVehicleModelCode());
		sb.append(", vehicleModelName=");
		sb.append(getVehicleModelName());
		sb.append(", capacity=");
		sb.append(getCapacity());
		sb.append(", manufacturedYear=");
		sb.append(getManufacturedYear());
		sb.append(", vehicleExpImpGateCode=");
		sb.append(getVehicleExpImpGateCode());
		sb.append(", vehicleExpImpGate=");
		sb.append(getVehicleExpImpGate());
		sb.append(", operationType=");
		sb.append(getOperationType());
		sb.append(", passengerOrCargo=");
		sb.append(getPassengerOrCargo());
		sb.append(", lienVanNo=");
		sb.append(getLienVanNo());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.fds.vr.business.model.ILVehicle");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issuingDispatchNo</column-name><column-value><![CDATA[");
		sb.append(getIssuingDispatchNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registrationNumber</column-name><column-value><![CDATA[");
		sb.append(getRegistrationNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registrationDriver</column-name><column-value><![CDATA[");
		sb.append(getRegistrationDriver());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleModelCode</column-name><column-value><![CDATA[");
		sb.append(getVehicleModelCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleModelName</column-name><column-value><![CDATA[");
		sb.append(getVehicleModelName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>capacity</column-name><column-value><![CDATA[");
		sb.append(getCapacity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturedYear</column-name><column-value><![CDATA[");
		sb.append(getManufacturedYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleExpImpGateCode</column-name><column-value><![CDATA[");
		sb.append(getVehicleExpImpGateCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleExpImpGate</column-name><column-value><![CDATA[");
		sb.append(getVehicleExpImpGate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>operationType</column-name><column-value><![CDATA[");
		sb.append(getOperationType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passengerOrCargo</column-name><column-value><![CDATA[");
		sb.append(getPassengerOrCargo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lienVanNo</column-name><column-value><![CDATA[");
		sb.append(getLienVanNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ILVehicle.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ILVehicle.class
		};
	private long _id;
	private String _issuingDispatchNo;
	private String _originalIssuingDispatchNo;
	private int _sequenceNo;
	private String _registrationNumber;
	private String _registrationDriver;
	private String _vehicleModelCode;
	private String _vehicleModelName;
	private String _capacity;
	private String _manufacturedYear;
	private String _vehicleExpImpGateCode;
	private String _vehicleExpImpGate;
	private String _operationType;
	private String _passengerOrCargo;
	private String _lienVanNo;
	private Date _syncDate;
	private long _columnBitmask;
	private ILVehicle _escapedModel;
}